'use client';

import { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { MainLayout } from '@/components/layout/main-layout';
import { useToast } from '@/components/ui/toast';
import { clientsService } from '@/lib/clientsService';
import { userService } from '@/lib/userService';
import { 
  User, 
  Mail, 
  Phone, 
  Calendar, 
  CreditCard, 
  Shield, 
  Building, 
  Clock, 
  AlertTriangle,
  DollarSign,
  Users,
  Activity,
  TrendingUp,
  FileText,
  Download,
  Plus,
  Trash2,
  Eye,
  EyeOff,
  Settings,
  Save,
  Edit,
  X,
  ArrowLeft,
  Package,
  Loader2,
  CheckCircle
} from 'lucide-react';

// Função para calcular força da senha
const calculatePasswordStrength = (password: string) => {
  let score = 0;
  if (password.length >= 8) score++;
  if (/[a-z]/.test(password)) score++;
  if (/[A-Z]/.test(password)) score++;
  if (/[0-9]/.test(password)) score++;
  if (/[^A-Za-z0-9]/.test(password)) score++;
  
  return {
    score,
    level: score < 2 ? 'weak' : score < 4 ? 'medium' : 'strong',
    color: score < 2 ? '#ef4444' : score < 4 ? '#f59e0b' : '#10b981'
  };
};

export default function ManageClientPage() {
  const params = useParams();
  const router = useRouter();
  const { toast } = useToast();
  
  const [client, setClient] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [showCreditsModal, setShowCreditsModal] = useState(false);
  const [showPasswordModal, setShowPasswordModal] = useState(false);
  const [showUpgradeModal, setShowUpgradeModal] = useState(false);
  const [creditsAmount, setCreditsAmount] = useState('');
  const [newPassword, setNewPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [selectedPlan, setSelectedPlan] = useState('');
  const [editingField, setEditingField] = useState<string | null>(null);
  const [editValues, setEditValues] = useState({ email: '', phone: '' });
  const [plans] = useState([
    { id: '1', name: 'Básico', price: 29.90, maxAgents: 5 },
    { id: '2', name: 'Profissional', price: 59.90, maxAgents: 15 },
    { id: '3', name: 'Empresarial', price: 99.90, maxAgents: 50 }
  ]);
  const [availablePlans, setAvailablePlans] = useState<any[]>([]);
  const [selectedUpgradePlan, setSelectedUpgradePlan] = useState<any>(null);
  const [activeTab, setActiveTab] = useState('profile');

  // Funções de edição inline
  const handleInlineEdit = (field: string) => {
    setEditingField(field);
    setEditValues({
      email: client?.email || '',
      phone: client?.phone || ''
    });
  };

  const handleSaveInlineEdit = async (field: string) => {
    try {
      const updatedClient = {
        ...client,
        [field]: editValues[field as keyof typeof editValues]
      };
      
      await clientsService.updateClient(client.id, updatedClient);
      setClient(updatedClient);
      setEditingField(null);
      
      showToast('success', `${field === 'email' ? 'E-mail' : 'Telefone'} atualizado com sucesso!`);
    } catch (error) {
      showToast('error', `Erro ao atualizar ${field === 'email' ? 'e-mail' : 'telefone'}`);
    }
  };

  const handleCancelInlineEdit = () => {
    setEditingField(null);
    setEditValues({ email: '', phone: '' });
  };

  // Carregar dados do cliente
  useEffect(() => {
    loadClientData();
    loadAvailablePlans();
  }, [params.id]);

  const loadClientData = async () => {
    try {
      setIsLoading(true);
      const clients = await clientsService.getResellerClients();
      const clientData = clients.find(c => c.id === params.id);
      
      if (!clientData) {
        showError('Cliente não encontrado', 'Redirecionando para lista de clientes...');
        setTimeout(() => router.push('/reseller/clients'), 2000);
        return;
      }
      
      setClient(clientData);
      setEditValues({
        phone: clientData.phone || '',
        email: clientData.email || ''
      });
    } catch (error) {
      console.error('Erro ao carregar cliente:', error);
      showError('Erro', 'Falha ao carregar dados do cliente');
    } finally {
      setIsLoading(false);
    }
  };

  const loadAvailablePlans = async () => {
    try {
      // Carregar planos disponíveis para upgrade
      const { secureSupabaseService } = await import('@/services/secureSupabaseService');
      const currentUser = userService.getCurrentUser();
      if (currentUser?.role === 'reseller') {
        const plans = await secureSupabaseService.getPlansByReseller(currentUser.id);
        setAvailablePlans(plans);
      }
    } catch (error) {
      console.error('Erro ao carregar planos:', error);
    }
  };

  // Função para calcular força da senha
  const calculatePasswordStrength = (password: string) => {
    let strength = 0;
    if (password.length >= 8) strength += 25;
    if (/[a-z]/.test(password)) strength += 25;
    if (/[A-Z]/.test(password)) strength += 25;
    if (/[0-9]/.test(password)) strength += 25;
    return strength;
  };

  // Função para calcular dias restantes
  const calculateDaysRemaining = (expirationDate: string) => {
    if (!expirationDate) return null;
    const today = new Date();
    const expiry = new Date(expirationDate);
    const diffTime = expiry.getTime() - today.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    return diffDays;
  };

  // Função para buscar limite real de agentes do plano
  const getPlanAgentLimit = () => {
    if (!client?.plan_id || !availablePlans.length) return 'Carregando...';
    const plan = availablePlans.find(p => p.id === client.plan_id);
    return plan?.maxAgents || plan?.max_agents || 'Ilimitado';
  };

  // Função para calcular valor proporcional do upgrade
  const calculateUpgradeValue = (currentPlan: any, newPlan: any) => {
    if (!currentPlan || !newPlan) return 0;
    
    const daysRemaining = calculateDaysRemaining(client?.plan_expires_at);
    if (!daysRemaining || daysRemaining <= 0) return newPlan.price;
    
    const currentPlanDailyValue = currentPlan.price / (currentPlan.periodDays || 30);
    const newPlanDailyValue = newPlan.price / (newPlan.periodDays || 30);
    const remainingValue = currentPlanDailyValue * daysRemaining;
    const newPlanValue = newPlanDailyValue * daysRemaining;
    
    return Math.max(0, newPlanValue - remainingValue);
  };

  const handlePasswordChange = async () => {
    if (passwordData.newPassword !== passwordData.confirmPassword) {
      showError('Erro', 'As senhas não coincidem');
      return;
    }
    
    if (passwordData.newPassword.length < 8) {
      showError('Erro', 'A senha deve ter pelo menos 8 caracteres');
      return;
    }

    const strength = calculatePasswordStrength(passwordData.newPassword);
    if (strength < 75) {
      showError('Senha Fraca', 'Use uma senha mais forte com letras maiúsculas, minúsculas e números');
      return;
    }

    try {
      // Implementar alteração de senha aqui
      showSuccess('Senha Alterada', 'A senha do cliente foi atualizada com sucesso');
      setPasswordData({ newPassword: '', confirmPassword: '' });
    } catch (error) {
      showError('Erro', 'Falha ao alterar senha');
    }
  };

  // Função para edição inline
  const handleInlineEdit = (field: string) => {
    setEditingField(field);
  };

  const handleSaveInlineEdit = async (field: string) => {
    try {
      const updateData = {
        id: client.id,
        name: client.name,
        company: client.company,
        email: field === 'email' ? editValues.email : client.email,
        phone: field === 'phone' ? editValues.phone : client.phone,
        plan: client.plan,
        status: client.status,
        notes: client.notes || ''
      };

      // Implementar atualização aqui
      await clientsService.updateClient(updateData);
      
      setClient((prev: any) => ({ ...prev, [field]: editValues[field as keyof typeof editValues] }));
      setEditingField(null);
      showSuccess('Atualizado', `${field === 'phone' ? 'Telefone' : 'E-mail'} atualizado com sucesso`);
    } catch (error) {
      showError('Erro', `Falha ao atualizar ${field === 'phone' ? 'telefone' : 'e-mail'}`);
    }
  };

  const handleCancelInlineEdit = () => {
    setEditingField(null);
    setEditValues({
      phone: client?.phone || '',
      email: client?.email || ''
    });
  };

  // Função para upgrade de plano
  const handleUpgradePlan = (plan: any) => {
    setSelectedUpgradePlan(plan);
    setShowUpgradeModal(true);
  };

  const confirmUpgrade = async () => {
    if (!selectedUpgradePlan) return;
    
    try {
      // Implementar upgrade de plano aqui
      showSuccess('Plano Atualizado', 'O plano do cliente foi atualizado com sucesso');
      setShowUpgradeModal(false);
      setSelectedUpgradePlan(null);
      await loadClientData();
    } catch (error) {
      showError('Erro', 'Falha ao atualizar plano');
    }
  };

  const formatDate = (dateString: string) => {
    if (!dateString) return 'Não informado';
    return new Date(dateString).toLocaleDateString('pt-BR');
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active': return { bg: '#dcfce7', color: '#16a34a' };
      case 'inactive': return { bg: '#fef3c7', color: '#d97706' };
      case 'suspended': return { bg: '#fee2e2', color: '#dc2626' };
      default: return { bg: '#f1f5f9', color: '#64748b' };
    }
  };

  if (isLoading) {
    return (
      <MainLayout>
        <div style={{ 
          display: 'flex', 
          justifyContent: 'center', 
          alignItems: 'center', 
          height: '400px' 
        }}>
          <Loader2 size={32} style={{ animation: 'spin 1s linear infinite' }} />
        </div>
      </MainLayout>
    );
  }

  if (!client) {
    return (
      <MainLayout>
        <div style={{ 
          display: 'flex', 
          flexDirection: 'column',
          justifyContent: 'center', 
          alignItems: 'center', 
          height: '400px',
          gap: '1rem'
        }}>
          <AlertTriangle size={48} style={{ color: '#ef4444' }} />
          <h2 style={{ color: '#374151', margin: 0 }}>Cliente não encontrado</h2>
          <p style={{ color: '#64748b', margin: 0 }}>O cliente solicitado não foi encontrado.</p>
        </div>
      </MainLayout>
    );
  }

  const tabs = [
    { id: 'profile', label: 'Perfil', icon: User },
    { id: 'plan', label: 'Plano', icon: Package },
    { id: 'security', label: 'Segurança', icon: Shield }
  ];

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active': return { bg: '#dcfce7', color: '#166534' };
      case 'inactive': return { bg: '#fef3c7', color: '#92400e' };
      default: return { bg: '#fee2e2', color: '#dc2626' };
    }
  };

  const tabs = [
    { id: 'profile', label: 'Perfil do Cliente', icon: User },
    { id: 'security', label: 'Segurança', icon: Shield },
    { id: 'plan', label: 'Plano', icon: Package },
    { id: 'financial', label: 'Financeiro', icon: CreditCard },
    { id: 'extras', label: 'Extras', icon: Settings }
  ];

  return (
    <MainLayout>
      <div style={{ padding: '2rem', maxWidth: '1200px', margin: '0 auto' }}>
        {/* Header */}
        <div style={{ marginBottom: '2rem' }}>
          <button
            onClick={() => router.push('/reseller/clients')}
            style={{
              display: 'flex',
              alignItems: 'center',
              gap: '0.5rem',
              padding: '0.5rem 1rem',
              backgroundColor: 'transparent',
              border: '1px solid #e2e8f0',
              borderRadius: '0.5rem',
              cursor: 'pointer',
              color: '#64748b',
              fontSize: '0.875rem',
              marginBottom: '1.5rem',
              transition: 'all 0.2s ease'
            }}
            onMouseEnter={(e) => {
              e.currentTarget.style.backgroundColor = '#f8fafc';
              e.currentTarget.style.borderColor = '#cbd5e1';
            }}
            onMouseLeave={(e) => {
              e.currentTarget.style.backgroundColor = 'transparent';
              e.currentTarget.style.borderColor = '#e2e8f0';
            }}
          >
            <ArrowLeft size={16} />
            Voltar para Clientes
          </button>

          <div style={{ display: 'flex', alignItems: 'center', gap: '1rem', flexWrap: 'wrap' }}>
            <div>
              <h1 style={{ 
                fontSize: '2rem', 
                fontWeight: 'bold', 
                color: '#1e293b', 
                marginBottom: '0.5rem' 
              }}>
                Gerenciar Cliente
              </h1>
              <div style={{ display: 'flex', alignItems: 'center', gap: '1rem', flexWrap: 'wrap' }}>
                <p style={{ color: '#64748b', fontSize: '1rem' }}>
                  {client.name} - {client.company}
                </p>
                <span style={{
                  padding: '0.25rem 0.75rem',
                  backgroundColor: getStatusColor(client.status).bg,
                  color: getStatusColor(client.status).color,
                  borderRadius: '9999px',
                  fontSize: '0.75rem',
                  fontWeight: '500'
                }}>
                  {client.status === 'active' ? 'Ativo' : 
                   client.status === 'inactive' ? 'Inativo' : 'Suspenso'}
                </span>
              </div>
            </div>
          </div>
        </div>

        {/* Tabs Navigation */}
        <div style={{ 
          borderBottom: '1px solid #e2e8f0', 
          marginBottom: '2rem',
          overflowX: 'auto'
        }}>
          <div style={{ 
            display: 'flex', 
            gap: '0',
            minWidth: 'fit-content'
          }}>
            {tabs.map((tab) => {
              const Icon = tab.icon;
              const isActive = activeTab === tab.id;
              
              return (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  style={{
                    display: 'flex',
                    alignItems: 'center',
                    gap: '0.5rem',
                    padding: '1rem 1.5rem',
                    backgroundColor: 'transparent',
                    border: 'none',
                    borderBottom: isActive ? '2px solid #3b82f6' : '2px solid transparent',
                    cursor: 'pointer',
                    color: isActive ? '#3b82f6' : '#64748b',
                    fontSize: '0.875rem',
                    fontWeight: isActive ? '600' : '500',
                    transition: 'all 0.2s ease',
                    whiteSpace: 'nowrap'
                  }}
                  onMouseEnter={(e) => {
                    if (!isActive) {
                      e.currentTarget.style.color = '#374151';
                    }
                  }}
                  onMouseLeave={(e) => {
                    if (!isActive) {
                      e.currentTarget.style.color = '#64748b';
                    }
                  }}
                >
                  <Icon size={16} />
                  {tab.label}
                </button>
              );
            })}
          </div>
        </div>

return (
  <MainLayout>
    <div style={{ padding: '2rem', maxWidth: '1200px', margin: '0 auto' }}>
      {/* Header */}
      <div style={{ marginBottom: '2rem' }}>
        <button
          onClick={() => router.push('/reseller/clients')}
          style={{
            display: 'flex',
            alignItems: 'center',
            gap: '0.5rem',
            padding: '0.5rem 1rem',
            backgroundColor: 'transparent',
            border: '1px solid #e2e8f0',
            borderRadius: '0.5rem',
            cursor: 'pointer',
            color: '#64748b',
            fontSize: '0.875rem',
            marginBottom: '1.5rem',
            transition: 'all 0.2s ease'
          }}
          onMouseEnter={(e) => {
            e.currentTarget.style.backgroundColor = '#f8fafc';
            e.currentTarget.style.borderColor = '#cbd5e1';
          }}
          onMouseLeave={(e) => {
            e.currentTarget.style.backgroundColor = 'transparent';
            e.currentTarget.style.borderColor = '#e2e8f0';
          }}
        >
          <ArrowLeft size={16} />
          Voltar para Clientes
        </button>

        <div style={{ display: 'flex', alignItems: 'center', gap: '1rem', flexWrap: 'wrap' }}>
          <div>
            <h1 style={{ 
              fontSize: '2rem', 
              fontWeight: 'bold', 
              color: '#1e293b', 
              marginBottom: '0.5rem' 
            }}>
              Gerenciar Cliente
            </h1>
            <div style={{ display: 'flex', alignItems: 'center', gap: '1rem', flexWrap: 'wrap' }}>
              <p style={{ color: '#64748b', fontSize: '1rem' }}>
                {client.name} - {client.company}
              </p>
              <span style={{
                padding: '0.25rem 0.75rem',
                backgroundColor: getStatusColor(client.status).bg,
                color: getStatusColor(client.status).color,
                borderRadius: '9999px',
                fontSize: '0.75rem',
                fontWeight: '500'
              }}>
                {client.status === 'active' ? 'Ativo' : 
                 client.status === 'inactive' ? 'Inativo' : 'Suspenso'}
              </span>
            </div>
          </div>
        </div>
      </div>

      {/* Tabs Navigation */}
      <div style={{ 
        borderBottom: '1px solid #e2e8f0', 
        marginBottom: '2rem',
        overflowX: 'auto'
      }}>
        <div style={{ 
          display: 'flex', 
          gap: '0',
          minWidth: 'fit-content'
        }}>
          {tabs.map((tab) => {
            const Icon = tab.icon;
            const isActive = activeTab === tab.id;
            
            return (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                style={{
                  display: 'flex',
                  alignItems: 'center',
                  gap: '0.5rem',
                  padding: '1rem 1.5rem',
                  backgroundColor: 'transparent',
                  border: 'none',
                  borderBottom: isActive ? '2px solid #3b82f6' : '2px solid transparent',
                  cursor: 'pointer',
                  color: isActive ? '#3b82f6' : '#64748b',
                  fontSize: '0.875rem',
                  fontWeight: isActive ? '600' : '500',
                  transition: 'all 0.2s ease',
                  whiteSpace: 'nowrap'
                }}
                onMouseEnter={(e) => {
                  if (!isActive) {
                    e.currentTarget.style.color = '#374151';
                  }
                }}
                onMouseLeave={(e) => {
                  if (!isActive) {
                    e.currentTarget.style.color = '#64748b';
                  }
                }}
              >
                <Icon size={16} />
                {tab.label}
              </button>
            );
          })}
        </div>
      </div>

      {/* Tab Content */}
      <div style={{ minHeight: '400px' }}>
        {/* Perfil do Cliente */}
        {activeTab === 'profile' && (
          <div style={{ display: 'grid', gap: '2rem' }}>
            <div style={{
              backgroundColor: 'white',
              borderRadius: '1rem',
              border: '1px solid #e2e8f0',
              padding: '2rem'
            }}>
              <h3 style={{ 
                fontSize: '1.25rem', 
                fontWeight: '600', 
                color: '#1e293b',
                marginBottom: '1.5rem',
                display: 'flex',
                alignItems: 'center',
                gap: '0.5rem'
              }}>
                <User size={20} />
                Informações Pessoais
              </h3>
              
              <div style={{ 
                display: 'grid', 
                gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))', 
                gap: '1.5rem' 
              }}>
                <div>
                  <label style={{ 
                    display: 'block', 
                    fontSize: '0.875rem', 
                    fontWeight: '500', 
                    color: '#374151',
                    marginBottom: '0.5rem'
                  }}>
                    Nome Completo
                  </label>
                  <div style={{
                    padding: '0.75rem',
                    backgroundColor: '#f8fafc',
                    border: '1px solid #e2e8f0',
                    borderRadius: '0.5rem',
                    color: '#1e293b'
                  }}>
                    {client.name}
                  </div>
                </div>

                <div>
                  <label style={{ 
                    display: 'block', 
                    fontSize: '0.875rem', 
                    fontWeight: '500', 
                    color: '#374151',
                    marginBottom: '0.5rem'
                  }}>
                    Empresa
                  </label>
                  <div style={{
                    padding: '0.75rem',
                    backgroundColor: '#f8fafc',
                    border: '1px solid #e2e8f0',
                    borderRadius: '0.5rem',
                    color: '#1e293b',
                    display: 'flex',
                    alignItems: 'center',
                    gap: '0.5rem'
                  }}>
                    <Building size={16} style={{ color: '#64748b' }} />
                    {client.company}
                  </div>
                </div>

                <div>
                  <label style={{ 
                    display: 'block', 
                    fontSize: '0.875rem', 
                    fontWeight: '500', 
                    color: '#374151',
                    marginBottom: '0.5rem'
                  }}>
                    E-mail
                  </label>
                  <div style={{
                    padding: '0.75rem',
                    backgroundColor: '#f8fafc',
                    border: '1px solid #e2e8f0',
                    borderRadius: '0.5rem',
                    color: '#1e293b',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'space-between'
                  }}>
                    <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
                      <Mail size={16} style={{ color: '#64748b' }} />
                      {client?.email || 'Não informado'}
                    </div>
                    <button
                      onClick={() => console.log('Edit email')}
                      style={{
                        padding: '0.25rem',
                        backgroundColor: 'transparent',
                        border: 'none',
                        cursor: 'pointer',
                        color: '#64748b',
                        borderRadius: '0.25rem'
                      }}
                      onMouseEnter={(e) => {
                        e.currentTarget.style.backgroundColor = '#e2e8f0';
                        e.currentTarget.style.color = '#374151';
                      }}
                      onMouseLeave={(e) => {
                        e.currentTarget.style.backgroundColor = 'transparent';
                        e.currentTarget.style.color = '#64748b';
                      }}
                    >
                      <Edit size={14} />
                    </button>
                  </div>
                </div>

                <div>
                  <label style={{ 
                    display: 'block', 
                    fontSize: '0.875rem', 
                    fontWeight: '500', 
                    color: '#374151',
                    marginBottom: '0.5rem'
                  }}>
                    Telefone
                  </label>
                  <div style={{
                    padding: '0.75rem',
                    backgroundColor: '#f8fafc',
                    border: '1px solid #e2e8f0',
                    borderRadius: '0.5rem',
                    color: '#1e293b',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'space-between'
                  }}>
                    <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
                      <Phone size={16} style={{ color: '#64748b' }} />
                      {client?.phone || 'Não informado'}
                    </div>
                    <button
                      onClick={() => console.log('Edit phone')}
                      style={{
                        padding: '0.25rem',
                        backgroundColor: 'transparent',
                        border: 'none',
                        cursor: 'pointer',
                        color: '#64748b',
                        borderRadius: '0.25rem'
                      }}
                      onMouseEnter={(e) => {
                        e.currentTarget.style.backgroundColor = '#e2e8f0';
                        e.currentTarget.style.color = '#374151';
                      }}
                      onMouseLeave={(e) => {
                        e.currentTarget.style.backgroundColor = 'transparent';
                        e.currentTarget.style.color = '#64748b';
                      }}
                    >
                      <Edit size={14} />
                    </button>
                  </div>
                </div>
              </div>
            </div>

                  <div>
                    <label style={{ 
                      display: 'block', 
                      fontSize: '0.875rem', 
                      fontWeight: '500', 
                      color: '#374151',
                      marginBottom: '0.5rem'
                    }}>
                      Telefone
                    </label>
                    {editingField === 'phone' ? (
                      <div style={{ display: 'flex', gap: '0.5rem', alignItems: 'center' }}>
                        <input
                          type="tel"
                          value={editValues.phone}
                          onChange={(e) => setEditValues(prev => ({ ...prev, phone: e.target.value }))}
                          style={{
                            flex: 1,
                            padding: '0.75rem',
                            border: '1px solid #3b82f6',
                            borderRadius: '0.5rem',
                            fontSize: '0.875rem',
                            outline: 'none',
                            boxShadow: '0 0 0 3px rgba(59, 130, 246, 0.1)'
                          }}
                          autoFocus
                        />
                        <button
                          onClick={() => handleSaveInlineEdit('phone')}
                          style={{
                            padding: '0.5rem',
                            backgroundColor: '#16a34a',
                            color: 'white',
                            border: 'none',
                            borderRadius: '0.375rem',
                            cursor: 'pointer'
                          }}
                        >
                          <Save size={16} />
                        </button>
                        <button
                          onClick={handleCancelInlineEdit}
                          style={{
                            padding: '0.5rem',
                            backgroundColor: '#64748b',
                            color: 'white',
                            border: 'none',
                            borderRadius: '0.375rem',
                            cursor: 'pointer'
                          }}
                        >
                          <X size={16} />
                        </button>
                      </div>
                    ) : (
                      <div style={{
                        padding: '0.75rem',
                        backgroundColor: '#f8fafc',
                        border: '1px solid #e2e8f0',
                        borderRadius: '0.5rem',
                        color: '#1e293b',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'space-between'
                      }}>
                        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
                          <Phone size={16} style={{ color: '#64748b' }} />
                          {client.phone}
                        </div>
                        <button
                          onClick={() => handleInlineEdit('phone')}
                          style={{
                            padding: '0.25rem',
                            backgroundColor: 'transparent',
                            border: 'none',
                            cursor: 'pointer',
                            color: '#64748b',
                            borderRadius: '0.25rem'
                          }}
                          onMouseEnter={(e) => {
                            e.currentTarget.style.backgroundColor = '#e2e8f0';
                            e.currentTarget.style.color = '#374151';
                          }}
                          onMouseLeave={(e) => {
                            e.currentTarget.style.backgroundColor = 'transparent';
                            e.currentTarget.style.color = '#64748b';
                          }}
                        >
                          <Edit size={14} />
                        </button>
                      </div>
                    )}
                  </div>

                  <div>
                    <label style={{ 
                      display: 'block', 
                      fontSize: '0.875rem', 
                      fontWeight: '500', 
                      color: '#374151',
                      marginBottom: '0.5rem'
                    }}>
                      Data de Cadastro
                    </label>
                    <div style={{
                      padding: '0.75rem',
                      backgroundColor: '#f8fafc',
                      border: '1px solid #e2e8f0',
                      borderRadius: '0.5rem',
                      color: '#1e293b',
                      display: 'flex',
                      alignItems: 'center',
                      gap: '0.5rem'
                    }}>
                      <Calendar size={16} style={{ color: '#64748b' }} />
                      {formatDate(client.created_at)}
                    </div>
                  </div>

                  <div>
                    <label style={{ 
                      display: 'block', 
                      fontSize: '0.875rem', 
                      fontWeight: '500', 
                      color: '#374151',
                      marginBottom: '0.5rem'
                    }}>
                      Último Login
                    </label>
                    <div style={{
                      padding: '0.75rem',
                      backgroundColor: '#f8fafc',
                      border: '1px solid #e2e8f0',
                      borderRadius: '0.5rem',
                      color: '#1e293b',
                      display: 'flex',
                      alignItems: 'center',
                      gap: '0.5rem'
                    }}>
                      <Clock size={16} style={{ color: '#64748b' }} />
                      {client.last_login_at ? formatDate(client.last_login_at) : 'Nunca fez login'}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Segurança */}
          {activeTab === 'security' && (
            <div style={{
              backgroundColor: 'white',
              borderRadius: '1rem',
              border: '1px solid #e2e8f0',
              padding: '2rem'
            }}>
              <h3 style={{ 
                fontSize: '1.25rem', 
                fontWeight: '600', 
                color: '#1e293b',
                marginBottom: '1.5rem',
                display: 'flex',
                alignItems: 'center',
                gap: '0.5rem'
              }}>
                <Shield size={20} />
                Alterar Senha
              </h3>
              
              <div style={{ 
                display: 'flex',
                flexDirection: window.innerWidth < 768 ? 'column' : 'row',
                gap: '2rem',
                maxWidth: '100%'
              }}>
                {/* Campos de Senha */}
                <div style={{ 
                  flex: '1',
                  minWidth: '280px',
                  maxWidth: window.innerWidth < 768 ? '100%' : '400px'
                }}>
                  <div style={{ marginBottom: '1.5rem' }}>
                    <label style={{ 
                      display: 'block', 
                      fontSize: '0.875rem', 
                      fontWeight: '500', 
                      color: '#374151',
                      marginBottom: '0.5rem'
                    }}>
                      Nova Senha
                    </label>
                    <div style={{ position: 'relative' }}>
                      <input
                        type={showPassword ? 'text' : 'password'}
                        value={passwordData.newPassword}
                        onChange={(e) => setPasswordData(prev => ({ ...prev, newPassword: e.target.value }))}
                        placeholder="Digite a nova senha"
                        style={{
                          width: '100%',
                          padding: '0.75rem',
                          paddingRight: '3rem',
                          border: '1px solid #d1d5db',
                          borderRadius: '0.5rem',
                          fontSize: '0.875rem',
                          outline: 'none',
                          transition: 'all 0.2s ease',
                          boxSizing: 'border-box'
                        }}
                        onFocus={(e) => {
                          e.currentTarget.style.borderColor = '#3b82f6';
                          e.currentTarget.style.boxShadow = '0 0 0 3px rgba(59, 130, 246, 0.1)';
                        }}
                        onBlur={(e) => {
                          e.currentTarget.style.borderColor = '#d1d5db';
                          e.currentTarget.style.boxShadow = 'none';
                        }}
                      />
                      <button
                        type="button"
                        onClick={() => setShowPassword(!showPassword)}
                        style={{
                          position: 'absolute',
                          right: '0.75rem',
                          top: '50%',
                          transform: 'translateY(-50%)',
                          background: 'none',
                          border: 'none',
                          cursor: 'pointer',
                          color: '#64748b'
                        }}
                      >
                        {showPassword ? <EyeOff size={16} /> : <Eye size={16} />}
                      </button>
                    </div>
                    
                    {/* Barra de Força da Senha */}
                    {passwordData.newPassword && (
                      <div style={{ marginTop: '0.5rem' }}>
                        <div style={{ 
                          display: 'flex', 
                          alignItems: 'center', 
                          gap: '0.5rem',
                          marginBottom: '0.25rem'
                        }}>
                          <span style={{ fontSize: '0.75rem', color: '#64748b' }}>
                            Força da senha:
                          </span>
                          <span style={{ 
                            fontSize: '0.75rem', 
                            fontWeight: '500',
                            color: calculatePasswordStrength(passwordData.newPassword) >= 75 ? '#16a34a' : 
                                   calculatePasswordStrength(passwordData.newPassword) >= 50 ? '#f59e0b' : '#dc2626'
                          }}>
                            {calculatePasswordStrength(passwordData.newPassword) >= 75 ? 'Forte' : 
                             calculatePasswordStrength(passwordData.newPassword) >= 50 ? 'Média' : 'Fraca'}
                          </span>
                        </div>
                        <div style={{
                          width: '100%',
                          height: '4px',
                          backgroundColor: '#f1f5f9',
                          borderRadius: '2px',
                          overflow: 'hidden'
                        }}>
                          <div style={{
                            width: `${calculatePasswordStrength(passwordData.newPassword)}%`,
                            height: '100%',
                            backgroundColor: calculatePasswordStrength(passwordData.newPassword) >= 75 ? '#16a34a' : 
                                           calculatePasswordStrength(passwordData.newPassword) >= 50 ? '#f59e0b' : '#dc2626',
                            transition: 'all 0.3s ease'
                          }} />
                        </div>
                      </div>
                    )}
                  </div>

                  <div style={{ marginBottom: '1.5rem' }}>
                    <label style={{ 
                      display: 'block', 
                      fontSize: '0.875rem', 
                      fontWeight: '500', 
                      color: '#374151',
                      marginBottom: '0.5rem'
                    }}>
                      Confirmar Senha
                    </label>
                    <input
                      type={showPassword ? 'text' : 'password'}
                      value={passwordData.confirmPassword}
                      onChange={(e) => setPasswordData(prev => ({ ...prev, confirmPassword: e.target.value }))}
                      placeholder="Confirme a nova senha"
                      style={{
                        width: '100%',
                        padding: '0.75rem',
                        border: '1px solid #d1d5db',
                        borderRadius: '0.5rem',
                        fontSize: '0.875rem',
                        outline: 'none',
                        transition: 'all 0.2s ease',
                        boxSizing: 'border-box'
                      }}
                      onFocus={(e) => {
                        e.currentTarget.style.borderColor = '#3b82f6';
                        e.currentTarget.style.boxShadow = '0 0 0 3px rgba(59, 130, 246, 0.1)';
                      }}
                      onBlur={(e) => {
                        e.currentTarget.style.borderColor = '#d1d5db';
                        e.currentTarget.style.boxShadow = 'none';
                      }}
                    />
                  </div>

                  <button
                    onClick={handlePasswordChange}
                    disabled={!passwordData.newPassword || !passwordData.confirmPassword || calculatePasswordStrength(passwordData.newPassword) < 75}
                    style={{
                      display: 'flex',
                      alignItems: 'center',
                      gap: '0.5rem',
                      padding: '0.75rem 1.5rem',
                      backgroundColor: (passwordData.newPassword && passwordData.confirmPassword && calculatePasswordStrength(passwordData.newPassword) >= 75) ? '#3b82f6' : '#f1f5f9',
                      color: (passwordData.newPassword && passwordData.confirmPassword && calculatePasswordStrength(passwordData.newPassword) >= 75) ? 'white' : '#9ca3af',
                      border: 'none',
                      borderRadius: '0.5rem',
                      cursor: (passwordData.newPassword && passwordData.confirmPassword && calculatePasswordStrength(passwordData.newPassword) >= 75) ? 'pointer' : 'not-allowed',
                      fontSize: '0.875rem',
                      fontWeight: '500',
                      transition: 'all 0.2s ease',
                      width: window.innerWidth < 768 ? '100%' : 'auto'
                    }}
                  >
                    <Save size={16} />
                    Alterar Senha
                  </button>
                </div>

                {/* Dicas de Senha */}
                <div style={{
                  flex: '1',
                  minWidth: '280px',
                  maxWidth: window.innerWidth < 768 ? '100%' : '350px',
                  padding: '1.5rem',
                  backgroundColor: '#f8fafc',
                  borderRadius: '0.75rem',
                  border: '1px solid #e2e8f0'
                }}>
                  <h4 style={{
                    fontSize: '1rem',
                    fontWeight: '600',
                    color: '#1e293b',
                    marginBottom: '1rem',
                    display: 'flex',
                    alignItems: 'center',
                    gap: '0.5rem'
                  }}>
                    <Shield size={16} />
                    Requisitos da Senha
                  </h4>
                  
                  <div style={{ display: 'flex', flexDirection: 'column', gap: '0.75rem' }}>
                    <div style={{ 
                      display: 'flex', 
                      alignItems: 'center', 
                      gap: '0.5rem',
                      fontSize: '0.875rem'
                    }}>
                      <div style={{
                        width: '16px',
                        height: '16px',
                        borderRadius: '50%',
                        backgroundColor: passwordData.newPassword.length >= 8 ? '#16a34a' : '#e5e7eb',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center'
                      }}>
                        {passwordData.newPassword.length >= 8 && (
                          <CheckCircle size={12} style={{ color: 'white' }} />
                        )}
                      </div>
                      <span style={{ color: passwordData.newPassword.length >= 8 ? '#16a34a' : '#64748b' }}>
                        Mínimo 8 caracteres
                      </span>
                    </div>

                    <div style={{ 
                      display: 'flex', 
                      alignItems: 'center', 
                      gap: '0.5rem',
                      fontSize: '0.875rem'
                    }}>
                      <div style={{
                        width: '16px',
                        height: '16px',
                        borderRadius: '50%',
                        backgroundColor: /[a-z]/.test(passwordData.newPassword) ? '#16a34a' : '#e5e7eb',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center'
                      }}>
                        {/[a-z]/.test(passwordData.newPassword) && (
                          <CheckCircle size={12} style={{ color: 'white' }} />
                        )}
                      </div>
                      <span style={{ color: /[a-z]/.test(passwordData.newPassword) ? '#16a34a' : '#64748b' }}>
                        Letras minúsculas
                      </span>
                    </div>

                    <div style={{ 
                      display: 'flex', 
                      alignItems: 'center', 
                      gap: '0.5rem',
                      fontSize: '0.875rem'
                    }}>
                      <div style={{
                        width: '16px',
                        height: '16px',
                        borderRadius: '50%',
                        backgroundColor: /[A-Z]/.test(passwordData.newPassword) ? '#16a34a' : '#e5e7eb',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center'
                      }}>
                        {/[A-Z]/.test(passwordData.newPassword) && (
                          <CheckCircle size={12} style={{ color: 'white' }} />
                        )}
                      </div>
                      <span style={{ color: /[A-Z]/.test(passwordData.newPassword) ? '#16a34a' : '#64748b' }}>
                        Letras maiúsculas
                      </span>
                    </div>

                    <div style={{ 
                      display: 'flex', 
                      alignItems: 'center', 
                      gap: '0.5rem',
                      fontSize: '0.875rem'
                    }}>
                      <div style={{
                        width: '16px',
                        height: '16px',
                        borderRadius: '50%',
                        backgroundColor: /[0-9]/.test(passwordData.newPassword) ? '#16a34a' : '#e5e7eb',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center'
                      }}>
                        {/[0-9]/.test(passwordData.newPassword) && (
                          <CheckCircle size={12} style={{ color: 'white' }} />
                        )}
                      </div>
                      <span style={{ color: /[0-9]/.test(passwordData.newPassword) ? '#16a34a' : '#64748b' }}>
                        Números
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Plano */}
          {activeTab === 'plan' && (
            <div style={{
              backgroundColor: 'white',
              borderRadius: '1rem',
              border: '1px solid #e2e8f0',
              padding: '2rem'
            }}>
              <h3 style={{ 
                fontSize: '1.25rem', 
                fontWeight: '600', 
                color: '#1e293b',
                marginBottom: '1.5rem',
                display: 'flex',
                alignItems: 'center',
                gap: '0.5rem'
              }}>
                <Package size={20} />
                Informações do Plano
              </h3>
              
              <div style={{ 
                display: 'grid', 
                gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', 
                gap: '1.5rem' 
              }}>
                <div style={{
                  padding: '1.5rem',
                  backgroundColor: '#f8fafc',
                  borderRadius: '0.75rem',
                  border: '1px solid #e2e8f0'
                }}>
                  <div style={{ 
                    display: 'flex', 
                    alignItems: 'center', 
                    gap: '0.5rem',
                    marginBottom: '1rem'
                  }}>
                    <Package size={20} style={{ color: '#3b82f6' }} />
                    <h4 style={{ fontSize: '1rem', fontWeight: '600', color: '#1e293b' }}>
                      Plano Atual
                    </h4>
                  </div>
                  <p style={{ 
                    fontSize: '1.25rem', 
                    fontWeight: '700', 
                    color: '#3b82f6',
                    marginBottom: '0.5rem'
                  }}>
                    {client.plan_name || client.plan || 'Sem Plano'}
                  </p>
                  <p style={{ fontSize: '0.875rem', color: '#64748b' }}>
                    Status: Ativo
                  </p>
                </div>

                <div style={{
                  padding: '1.5rem',
                  backgroundColor: '#f0fdf4',
                  borderRadius: '0.75rem',
                  border: '1px solid #d1fae5'
                }}>
                  <div style={{ 
                    display: 'flex', 
                    alignItems: 'center', 
                    gap: '0.5rem',
                    marginBottom: '1rem'
                  }}>
                    <Users size={20} style={{ color: '#16a34a' }} />
                    <h4 style={{ fontSize: '1rem', fontWeight: '600', color: '#1e293b' }}>
                      Agentes
                    </h4>
                  </div>
                  <p style={{ 
                    fontSize: '1.25rem', 
                    fontWeight: '700', 
                    color: '#16a34a',
                    marginBottom: '0.5rem'
                  }}>
                    {client.agents || 0} / {client.max_agents || 'Ilimitado'}
                  </p>
                  <p style={{ fontSize: '0.875rem', color: '#64748b' }}>
                    Agentes utilizados
                  </p>
                </div>

                <div style={{
                  padding: '1.5rem',
                  backgroundColor: '#fef3c7',
                  borderRadius: '0.75rem',
                  border: '1px solid #fed7aa'
                }}>
                  <div style={{ 
                    display: 'flex', 
                    alignItems: 'center', 
                    gap: '0.5rem',
                    marginBottom: '1rem'
                  }}>
                    <Calendar size={20} style={{ color: '#d97706' }} />
                    <h4 style={{ fontSize: '1rem', fontWeight: '600', color: '#1e293b' }}>
                      Vencimento
                    </h4>
                  </div>
                  <p style={{ 
                    fontSize: '1.25rem', 
                    fontWeight: '700', 
                    color: '#d97706',
                    marginBottom: '0.5rem'
                  }}>
                    {client.plan_expires_at ? formatDate(client.plan_expires_at) : 'Não definido'}
                  </p>
                  <p style={{ fontSize: '0.875rem', color: '#64748b' }}>
                    Data de expiração
                  </p>
                </div>
              </div>
            </div>
          )}

          {/* Financeiro */}
          {activeTab === 'financial' && (
            <div style={{
              backgroundColor: 'white',
              borderRadius: '1rem',
              border: '1px solid #e2e8f0',
              padding: '2rem',
              textAlign: 'center'
            }}>
              <div style={{ 
                display: 'flex', 
                flexDirection: 'column', 
                alignItems: 'center', 
                gap: '1rem',
                color: '#64748b'
              }}>
                <CreditCard size={48} style={{ color: '#f59e0b' }} />
                <h3 style={{ 
                  fontSize: '1.25rem', 
                  fontWeight: '600', 
                  color: '#1e293b',
                  margin: 0
                }}>
                  Módulo Financeiro
                </h3>
                <p style={{ fontSize: '1rem', margin: 0 }}>
                  Esta funcionalidade está em desenvolvimento
                </p>
                <p style={{ fontSize: '0.875rem', margin: 0 }}>
                  Em breve você poderá gerenciar o histórico financeiro, faturas e pagamentos do cliente
                </p>
              </div>
            </div>
          )}

          {/* Extras */}
          {activeTab === 'extras' && (
            <div style={{
              backgroundColor: 'white',
              borderRadius: '1rem',
              border: '1px solid #e2e8f0',
              padding: '2rem',
              textAlign: 'center'
            }}>
              <div style={{ 
                display: 'flex', 
                flexDirection: 'column', 
                alignItems: 'center', 
                gap: '1rem',
                color: '#64748b'
              }}>
                <Settings size={48} style={{ color: '#6366f1' }} />
                <h3 style={{ 
                  fontSize: '1.25rem', 
                  fontWeight: '600', 
                  color: '#1e293b',
                  margin: 0
                }}>
                  Funcionalidades Extras
                </h3>
                <p style={{ fontSize: '1rem', margin: 0 }}>
                  Esta seção está em desenvolvimento
                </p>
                <p style={{ fontSize: '0.875rem', margin: 0 }}>
                  Em breve você terá acesso a recursos adicionais como relatórios personalizados, integrações e configurações avançadas
                </p>
              </div>
            </div>
          )}
        </div>
      </div>
    </MainLayout>
  );
}
