'use client';

import { useState, useEffect, useCallback, useMemo } from 'react';
import { Eye, Edit, Trash2, Plus, Search, DollarSign, Users, UserCheck, Building, Phone, Mail, Settings, X, Download, Filter, Shield, User, CreditCard, AlertTriangle } from 'lucide-react';
import { MainLayout } from '@/components/layout/main-layout';
import { useToast } from '@/components/ui/toast';
import { Tooltip } from '@/components/ui/tooltip';
import { ConfirmationDialog } from '@/components/ui/confirmation-dialog';
import { useDebounce } from '@/hooks/useDebounce';
import { ResponsiveCard, useIsMobile } from '@/components/ui/responsive-card';
import { Pagination, usePagination } from '@/components/ui/pagination';
import { DataExport } from '@/components/ui/data-export';
import { AdvancedFilters } from '@/components/ui/advanced-filters';
import usersService from '@/services/usersService';

interface AdminUser {
  id: string;
  name: string;
  username: string;
  email: string;
  company: string;
  phone: string;
  role: 'user' | 'admin' | 'reseller' | 'collaborator';
  status: 'active' | 'inactive' | 'suspended' | 'pending';
  credits: number;
  planId?: string;
  planName?: string;
  parentResellerId?: string;
  maxConcurrentCalls: number;
  timezone: string;
  language: string;
  createdAt: string;
  updatedAt: string;
  lastLoginAt?: string;
  // Campos computados para compatibilidade com UI existente
  plan?: string;
  type?: 'client' | 'reseller' | 'admin' | 'collaborator';
  lastLogin?: Date;
  isPlanExpired?: boolean;
}

export default function AdminUsersPage() {
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [selectedUser, setSelectedUser] = useState<AdminUser | null>(null);
  const [showNewUserModal, setShowNewUserModal] = useState(false);
  const [showAddCreditsModal, setShowAddCreditsModal] = useState(false);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [showViewUserModal, setShowViewUserModal] = useState(false);
  const [showEditUserModal, setShowEditUserModal] = useState(false);
  const [selectedUserId, setSelectedUserId] = useState<string>('');
  const [isLoading, setIsLoading] = useState(false);
  const [filters, setFilters] = useState<Record<string, any>>({});
  const debouncedSearchTerm = useDebounce(searchTerm, 300);
  const toast = useToast();
  const isMobile = useIsMobile();
  const [creditsData, setCreditsData] = useState({
    amount: '',
    note: ''
  });
  const [newUser, setNewUser] = useState({
    name: '',
    username: '',
    email: '',
    company: '',
    phone: '',
    plan: 'Basic',
    status: 'active',
    password: '',
    type: 'cliente'
  });
  


  // Estado para usuários reais
  const [users, setUsers] = useState<AdminUser[]>([]);
  const [totalUsersCount, setTotalUsersCount] = useState(0);
  const [totalPagesCount, setTotalPagesCount] = useState(0);
  const [isLoadingUsers, setIsLoadingUsers] = useState(true);

  // Função memoizada para converter dados do backend para formato da UI
  const convertBackendUser = useCallback((backendUser: any): AdminUser => {
    return {
      ...backendUser,
      // Campos computados para compatibilidade
      type: backendUser.role === 'user' ? 'client' : backendUser.role,
      plan: backendUser.planName || 'Sem Plano', // Usar nome real do plano
      lastLogin: backendUser.lastLoginAt ? new Date(backendUser.lastLoginAt) : undefined,
      // Adicionar campo para verificar se o plano está expirado
      isPlanExpired: backendUser.planStatus === false || 
        (backendUser.planExpiresAt && new Date(backendUser.planExpiresAt) < new Date())
    };
  }, []);

  // Função memoizada para carregar usuários
  const loadUsers = useCallback(async () => {
    setIsLoadingUsers(true);
    try {
      const filters = {
        search: debouncedSearchTerm,
        role: statusFilter !== 'all' ? statusFilter : undefined,
        status: statusFilter !== 'all' ? statusFilter : undefined,
        page: 1,
        limit: 20
      };
      
      const response = await usersService.getAllUsers(filters);
      const convertedUsers = response.users.map(convertBackendUser);
      setUsers(convertedUsers);
      setTotalUsersCount(response.pagination.total);
      setTotalPagesCount(response.pagination.totalPages);
    } catch (error) {
      console.error('Erro ao carregar usuários:', error);
      toast.error('Erro', 'Erro ao carregar usuários. Tente novamente.');
    } finally {
      setIsLoadingUsers(false);
    }
  }, [debouncedSearchTerm, statusFilter, toast, convertBackendUser]);

  // Carregar usuários reais do backend
  useEffect(() => {
    loadUsers();
  }, [loadUsers]);

  // Filtrar usuários memoizado para melhor performance
  const filteredUsers = useMemo(() => {
    return users.filter(user => {
      const matchesSearch = !debouncedSearchTerm || 
        user.name.toLowerCase().includes(debouncedSearchTerm.toLowerCase()) ||
        user.email.toLowerCase().includes(debouncedSearchTerm.toLowerCase()) ||
        user.company.toLowerCase().includes(debouncedSearchTerm.toLowerCase());
      
      const matchesStatus = statusFilter === 'all' || user.status === statusFilter;
      
      return matchesSearch && matchesStatus;
    });
  }, [users, debouncedSearchTerm, statusFilter]);
  
  // Paginação
  const {
    currentPage,
    totalPages,
    currentData: paginatedUsers,
    totalItems,
    itemsPerPage,
    goToPage
  } = usePagination(filteredUsers, 10);

  // Campos de filtros avançados
  const filterFields = [
    {
      key: 'plan',
      label: 'Plano',
      type: 'multiselect' as const,
      options: [
        { value: 'Básico', label: 'Básico', count: users.filter(u => u.plan === 'Básico').length },
        { value: 'Profissional', label: 'Profissional', count: users.filter(u => u.plan === 'Profissional').length },
        { value: 'Empresarial', label: 'Empresarial', count: users.filter(u => u.plan === 'Empresarial').length },
        { value: 'Premium', label: 'Premium', count: users.filter(u => u.plan === 'Premium').length }
      ]
    },
    {
      key: 'type',
      label: 'Tipo de Usuário',
      type: 'multiselect' as const,
      options: [
        { value: 'client', label: 'Cliente', count: users.filter(u => u.type === 'client').length },
        { value: 'reseller', label: 'Revenda', count: users.filter(u => u.type === 'reseller').length },
        { value: 'admin', label: 'Administrador', count: users.filter(u => u.type === 'admin').length },
        { value: 'collaborator', label: 'Colaborador', count: users.filter(u => u.type === 'collaborator').length }
      ]
    },
    {
      key: 'credits',
      label: 'Faixa de Créditos',
      type: 'number' as const,
      placeholder: 'Valor mínimo',
      min: 0
    },
    {
      key: 'createdDate',
      label: 'Data de Criação',
      type: 'daterange' as const
    }
  ];

  // Funções memoizadas para cores e labels
  const getStatusColor = useCallback((status: string) => {
    switch (status) {
      case 'active': return '#16a34a';
      case 'inactive': return '#f59e0b';
      case 'suspended': return '#ef4444';
      default: return '#6b7280';
    }
  }, []);

  const getStatusLabel = useCallback((status: string) => {
    switch (status) {
      case 'active': return 'Ativo';
      case 'inactive': return 'Inativo';
      case 'suspended': return 'Suspenso';
      default: return 'Pendente';
    }
  }, []);

  const getPlanColor = useCallback((plan: string) => {
    // Cores baseadas nos nomes reais dos planos
    if (plan.toLowerCase().includes('basico')) return '#3b82f6';
    if (plan.toLowerCase().includes('premium')) return '#8b5cf6';
    if (plan.toLowerCase().includes('exclusive')) return '#f59e0b';
    if (plan.toLowerCase().includes('enterprise')) return '#ef4444';
    if (plan.toLowerCase().includes('starter')) return '#10b981';
    if (plan.toLowerCase().includes('pro')) return '#6366f1';
    if (plan.toLowerCase().includes('business')) return '#f97316';
    if (plan.toLowerCase().includes('unlimited')) return '#ec4899';
    // Cores para planos sem nome específico ou "Sem Plano"
    if (plan === 'Sem Plano' || plan === 'Sem plano') return '#6b7280';
    // Cor padrão para outros planos
    return '#64748b';
  }, []);

  const formatDate = useCallback((date: Date | undefined) => {
    if (!date) return 'Nunca';
    return date.toLocaleDateString('pt-BR');
  }, []);

  // Funções para o modal de novo usuário
  const openNewUserModal = () => {
    setNewUser({
      name: '',
      username: '',
      email: '',
      company: '',
      phone: '',
      plan: 'Basic',
      status: 'active',
      password: '',
      type: 'client'
    });
    setShowNewUserModal(true);
  };

  const closeNewUserModal = () => {
    setShowNewUserModal(false);
    setNewUser({
      name: '',
      username: '',
      email: '',
      company: '',
      phone: '',
      plan: 'Basic',
      status: 'active',
      password: '',
      type: 'client'
    });
  };

  const handleNewUserSubmit = async () => {
    // Validações
    if (!newUser.name.trim()) {
      toast.error('Erro de Validação', 'Nome é obrigatório');
      return;
    }
    
    if (!newUser.username.trim()) {
      toast.error('Erro de Validação', 'Nome de usuário é obrigatório');
      return;
    }
    
    if (!newUser.email.trim() || !newUser.email.includes('@')) {
      toast.error('Erro de Validação', 'Email válido é obrigatório');
      return;
    }
    
    if (!newUser.password.trim() || newUser.password.length < 6) {
      toast.error('Erro de Validação', 'Senha deve ter pelo menos 6 caracteres');
      return;
    }

    setIsLoading(true);
    try {
      // Criar usuário usando a API real
      const createUserData = {
        name: newUser.name,
        username: newUser.username,
        email: newUser.email,
        password: newUser.password,
        company: newUser.company,
        phone: newUser.phone,
        role: (newUser.type === 'client' ? 'user' : newUser.type) as 'user' | 'admin' | 'reseller' | 'collaborator',
        status: newUser.status as 'active' | 'inactive' | 'suspended' | 'pending'
      };
      
      const createdUser = await usersService.createUser(createUserData);
      const convertedUser = convertBackendUser(createdUser);
      
      // Adicionar usuário ao estado
      setUsers(prevUsers => [...prevUsers, convertedUser]);
      
      toast.success('Usuário Criado', `${newUser.name} foi criado com sucesso!`);
      closeNewUserModal();
    } catch (error) {
      console.error('Erro ao criar usuário:', error);
      toast.error('Erro', 'Erro ao criar usuário. Tente novamente.');
    } finally {
      setIsLoading(false);
    }
  };

  // Funções para o modal de adicionar créditos
  const openAddCreditsModal = (userId: string) => {
    setSelectedUserId(userId);
    setCreditsData({ amount: '', note: '' });
    setShowAddCreditsModal(true);
  };

  const closeAddCreditsModal = () => {
    setShowAddCreditsModal(false);
    setSelectedUserId('');
    setCreditsData({ amount: '', note: '' });
  };

  const handleAddCreditsSubmit = async () => {
    // Validações
    if (!creditsData.amount.trim() || isNaN(Number(creditsData.amount))) {
      toast.error('Erro de Validação', 'Valor deve ser um número válido');
      return;
    }
    
    const amount = Number(creditsData.amount);
    if (amount <= 0) {
      toast.error('Erro de Validação', 'Valor deve ser maior que zero');
      return;
    }

    setIsLoading(true);
    try {
      // Adicionar créditos usando a API real
      await usersService.addCredits(selectedUserId, {
        amount: amount,
        note: creditsData.note.trim()
      });
      
      // Atualizar créditos do usuário no estado
      setUsers(prevUsers => 
        prevUsers.map(user => 
          user.id === selectedUserId 
            ? { ...user, credits: user.credits + amount }
            : user
        )
      );
      
      const user = users.find(u => u.id === selectedUserId);
      toast.success('Créditos Adicionados', `R$ ${amount.toFixed(2)} adicionados para ${user?.name || 'usuário'}`);
      closeAddCreditsModal();
    } catch (error) {
      console.error('Erro ao adicionar créditos:', error);
      toast.error('Erro', 'Erro ao adicionar créditos. Tente novamente.');
    } finally {
      setIsLoading(false);
    }
  };

  // Função para confirmar exclusão de usuário
  const handleDeleteUser = (user: AdminUser) => {
    setSelectedUser(user);
    setShowDeleteConfirm(true);
  };

  const confirmDeleteUser = async () => {
    if (!selectedUser) return;
    
    setIsLoading(true);
    try {
      // Excluir usuário usando a API real
      await usersService.deleteUser(selectedUser.id);
      
      // Remover usuário do estado
      setUsers(prevUsers => prevUsers.filter(user => user.id !== selectedUser.id));
      
      toast.success('Usuário Excluído', `${selectedUser.name} foi excluído com sucesso`);
      setShowDeleteConfirm(false);
      setSelectedUser(null);
    } catch (error) {
      console.error('Erro ao excluir usuário:', error);
      toast.error('Erro', 'Erro ao excluir usuário. Tente novamente.');
    } finally {
      setIsLoading(false);
    }
  };

  // Funções para visualização de usuário
  const handleViewUser = (user: AdminUser) => {
    setSelectedUser(user);
    setShowViewUserModal(true);
  };

  const closeViewUserModal = () => {
    setShowViewUserModal(false);
    setSelectedUser(null);
  };

  // Funções para edição de usuário
  const handleEditUser = (user: AdminUser) => {
    setSelectedUser(user);
    // Preencher dados do usuário no formulário de edição
    setNewUser({
      name: user.name,
      username: user.username,
      email: user.email,
      company: user.company,
      phone: user.phone,
      plan: user.planId ? user.planId : 'Basic',
      status: user.status,
      password: '', // Senha em branco para edição
      type: user.type || 'client'
    });
    setShowEditUserModal(true);
  };

  const closeEditUserModal = () => {
    setShowEditUserModal(false);
    setSelectedUser(null);
    setNewUser({
      name: '',
      username: '',
      email: '',
      company: '',
      phone: '',
      plan: 'Basic',
      status: 'active',
      password: '',
      type: 'client'
    });
  };

  const handleUpdateUser = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!selectedUser) return;
    
    setIsLoading(true);
    try {
      // Atualizar usuário usando a API real
      const updatedUserData = {
        ...newUser,
        id: selectedUser.id
      };
      
      await usersService.updateUser(selectedUser.id, updatedUserData);
      
      // Atualizar usuário no estado local
      setUsers(prevUsers => 
        prevUsers.map(user => 
          user.id === selectedUser.id 
            ? { ...user, ...convertBackendUser(updatedUserData) }
            : user
        )
      );
      
      toast.success('Usuário Atualizado', `${newUser.name} foi atualizado com sucesso`);
      closeEditUserModal();
    } catch (error) {
      console.error('Erro ao atualizar usuário:', error);
      toast.error('Erro', 'Erro ao atualizar usuário. Tente novamente.');
    } finally {
      setIsLoading(false);
    }
  };

  // Função de exportação de dados
  const handleExport = async (format: string, data: any[]) => {
    const exportData = data.map(user => ({
      'Nome': user.name,
      'Email': user.email,
      'Empresa': user.company,
      'Telefone': user.phone,
      'Plano': user.plan,
      'Tipo': user.type === 'client' ? 'Cliente' : 
              user.type === 'reseller' ? 'Revenda' : 
              user.type === 'admin' ? 'Administrador' : 'Colaborador',
      'Status': user.status === 'active' ? 'Ativo' : 
                user.status === 'inactive' ? 'Inativo' : 'Suspenso',
      'Créditos': typeof user.credits === 'number' ? `R$ ${user.credits.toFixed(2)}` : user.credits,
      'Data de Criação': new Date(user.createdAt).toLocaleDateString('pt-BR')
    }));

    toast.success('Exportação Concluída', `${exportData.length} usuários exportados com sucesso`);
  };

  // Estatísticas baseadas nos dados reais carregados
  const totalUsersDisplay = totalUsersCount || users.length;
  const activeUsers = users.filter(u => u.status === 'active').length;
  const totalCredits = users.reduce((sum, u) => sum + u.credits, 0);
  const averageCredits = totalUsersDisplay > 0 ? totalCredits / totalUsersDisplay : 0;

  return (
    <MainLayout>
      <div style={{ 
        padding: '2rem', 
        minHeight: '100vh', 
        background: '#f8fafc'
      }}>
        {/* Header */}
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '2rem' }}>
          <div>
            <h1 style={{ fontSize: '2rem', fontWeight: 'bold', color: '#1e293b', marginBottom: '0.5rem' }}>
              Gerenciamento de Usuários
            </h1>
            <p style={{ color: '#64748b', fontSize: '1rem' }}>
              Administre todos os usuários do sistema
            </p>
          </div>
          
          <button
            onClick={openNewUserModal}
            style={{
              display: 'flex',
              alignItems: 'center',
              gap: '0.5rem',
              padding: '0.75rem 1.5rem',
              backgroundColor: '#ef4444',
              color: 'white',
              border: 'none',
              borderRadius: '0.5rem',
              fontSize: '0.875rem',
              fontWeight: '500',
              cursor: 'pointer'
            }}
          >
            <Plus style={{ width: '1rem', height: '1rem' }} />
            Novo Usuário
          </button>
        </div>

        {/* Stats Cards */}
        <div style={{ 
          display: 'grid', 
          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', 
          gap: '1.5rem', 
          marginBottom: '2rem' 
        }}>
          <div style={{
            backgroundColor: 'white',
            borderRadius: '0.5rem',
            padding: '1.5rem',
            boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',
            border: '1px solid #e2e8f0'
          }}>
            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: '1rem' }}>
              <div style={{
                width: '3rem',
                height: '3rem',
                borderRadius: '0.75rem',
                background: 'linear-gradient(135deg, #3b82f6, #1d4ed8)',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center'
              }}>
                <UserCheck size={20} style={{ color: 'white' }} />
              </div>
            </div>
            <h3 style={{ fontSize: '2rem', fontWeight: 'bold', color: '#1e293b', marginBottom: '0.25rem' }}>
              {totalUsersDisplay}
            </h3>
            <p style={{ color: '#64748b', fontSize: '0.875rem' }}>Total de Usuários</p>
          </div>

          <div style={{
            backgroundColor: 'white',
            borderRadius: '0.5rem',
            padding: '1.5rem',
            boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',
            border: '1px solid #e2e8f0'
          }}>
            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: '1rem' }}>
              <div style={{
                width: '3rem',
                height: '3rem',
                borderRadius: '0.75rem',
                background: 'linear-gradient(135deg, #10b981, #059669)',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center'
              }}>
                <Shield size={20} style={{ color: 'white' }} />
              </div>
            </div>
            <h3 style={{ fontSize: '2rem', fontWeight: 'bold', color: '#1e293b', marginBottom: '0.25rem' }}>
              {activeUsers}
            </h3>
            <p style={{ color: '#64748b', fontSize: '0.875rem' }}>Usuários Ativos</p>
          </div>

          <div style={{
            backgroundColor: 'white',
            borderRadius: '0.5rem',
            padding: '1.5rem',
            boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',
            border: '1px solid #e2e8f0'
          }}>
            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: '1rem' }}>
              <div style={{
                width: '3rem',
                height: '3rem',
                borderRadius: '0.75rem',
                background: 'linear-gradient(135deg, #8b5cf6, #7c3aed)',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center'
              }}>
                <User size={20} style={{ color: 'white' }} />
              </div>
            </div>
            <h3 style={{ fontSize: '2rem', fontWeight: 'bold', color: '#1e293b', marginBottom: '0.25rem' }}>
              R$ {totalCredits.toFixed(2)}
            </h3>
            <p style={{ color: '#64748b', fontSize: '0.875rem' }}>Total de Créditos</p>
          </div>

          <div style={{
            backgroundColor: 'white',
            borderRadius: '0.5rem',
            padding: '1.5rem',
            boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',
            border: '1px solid #e2e8f0'
          }}>
            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: '1rem' }}>
              <div style={{
                width: '3rem',
                height: '3rem',
                borderRadius: '0.75rem',
                background: 'linear-gradient(135deg, #f59e0b, #d97706)',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center'
              }}>
                <Phone size={20} style={{ color: 'white' }} />
              </div>
            </div>
            <h3 style={{ fontSize: '2rem', fontWeight: 'bold', color: '#1e293b', marginBottom: '0.25rem' }}>
              R$ {averageCredits.toFixed(2)}
            </h3>
            <p style={{ color: '#64748b', fontSize: '0.875rem' }}>Média de Créditos</p>
          </div>
        </div>

        {/* Filtros Avançados */}
        <AdvancedFilters
          fields={filterFields}
          onFiltersChange={setFilters}
          initialFilters={filters}
        />

        {/* Busca e Ações */}
        <div style={{
          backgroundColor: 'white',
          borderRadius: '0.5rem',
          padding: '1.5rem',
          boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',
          border: '1px solid #e2e8f0',
          marginBottom: '1.5rem'
        }}>
          <div style={{ 
            display: 'flex', 
            gap: '1rem', 
            alignItems: 'center',
            flexWrap: 'wrap',
            justifyContent: 'space-between'
          }}>
            <div style={{ position: 'relative', flex: '1', minWidth: '250px', maxWidth: '400px' }}>
              <Search style={{ 
                position: 'absolute', 
                left: '0.75rem', 
                top: '50%', 
                transform: 'translateY(-50%)', 
                width: '1rem', 
                height: '1rem', 
                color: '#64748b' 
              }} />
              <input
                type="text"
                placeholder="Buscar por nome, email ou empresa..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                style={{
                  width: '100%',
                  padding: '0.75rem 0.75rem 0.75rem 2.5rem',
                  border: '1px solid #d1d5db',
                  borderRadius: '0.5rem',
                  fontSize: '0.875rem',
                  outline: 'none',
                  boxSizing: 'border-box'
                }}
              />
            </div>
            
            <div style={{ display: 'flex', alignItems: 'center', gap: '1rem', flexShrink: 0 }}>
              <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
                <Filter style={{ width: '1rem', height: '1rem', color: '#64748b' }} />
                <select
                  value={statusFilter}
                  onChange={(e) => setStatusFilter(e.target.value)}
                  style={{
                    padding: '0.75rem',
                    border: '1px solid #d1d5db',
                    borderRadius: '0.5rem',
                    fontSize: '0.875rem',
                    outline: 'none',
                    backgroundColor: 'white',
                    minWidth: '150px'
                  }}
                >
                  <option value="all">Todos os Status</option>
                  <option value="active">Ativo</option>
                  <option value="inactive">Inativo</option>
                  <option value="suspended">Suspenso</option>
                </select>
              </div>
              
              <DataExport
                data={filteredUsers}
                filename="usuarios-admin"
                title="Exportar Usuários"
                onExport={handleExport}
              />
            </div>
          </div>
        </div>

        {/* Users Table/Cards */}
        <div style={{
          backgroundColor: 'white',
          borderRadius: '0.5rem',
          boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',
          border: '1px solid #e2e8f0',
          overflow: 'hidden'
        }}>
          {/* Indicador de Carregamento */}
          {isLoadingUsers && (
            <div style={{
              padding: '2rem',
              textAlign: 'center',
              color: '#64748b'
            }}>
              <div style={{
                display: 'inline-block',
                width: '2rem',
                height: '2rem',
                border: '2px solid #e2e8f0',
                borderTop: '2px solid #ef4444',
                borderRadius: '50%',
                animation: 'spin 1s linear infinite',
                marginBottom: '1rem'
              }}></div>
              <p>Carregando usuários...</p>
            </div>
          )}
          
          {/* Conteúdo da Tabela */}
          {!isLoadingUsers && (
            <>
            {!isMobile ? (
            // Desktop Table
            <div style={{ overflowX: 'auto' }}>
              <table style={{ width: '100%', borderCollapse: 'collapse' }}>
                <thead>
                  <tr style={{ backgroundColor: '#f8fafc' }}>
                    <th style={{ padding: '1rem', textAlign: 'left', fontWeight: '600', color: '#374151', borderBottom: '1px solid #e2e8f0' }}>Usuário</th>
                    <th style={{ padding: '1rem', textAlign: 'left', fontWeight: '600', color: '#374151', borderBottom: '1px solid #e2e8f0' }}>Empresa</th>
                    <th style={{ padding: '1rem', textAlign: 'left', fontWeight: '600', color: '#374151', borderBottom: '1px solid #e2e8f0' }}>Plano</th>
                    <th style={{ padding: '1rem', textAlign: 'left', fontWeight: '600', color: '#374151', borderBottom: '1px solid #e2e8f0' }}>Status</th>
                    <th style={{ padding: '1rem', textAlign: 'left', fontWeight: '600', color: '#374151', borderBottom: '1px solid #e2e8f0' }}>Créditos</th>
                    <th style={{ padding: '1rem', textAlign: 'left', fontWeight: '600', color: '#374151', borderBottom: '1px solid #e2e8f0' }}>Último Login</th>
                    <th style={{ padding: '1rem', textAlign: 'left', fontWeight: '600', color: '#374151', borderBottom: '1px solid #e2e8f0' }}>Ações</th>
                  </tr>
                </thead>
                <tbody>
                  {paginatedUsers.map((user) => (
                  <tr key={user.id} style={{ borderBottom: '1px solid #f1f5f9' }}>
                    <td style={{ padding: '1rem' }}>
                      <div style={{ display: 'flex', alignItems: 'center', gap: '0.75rem' }}>
                        <div style={{
                          width: '2.5rem',
                          height: '2.5rem',
                          backgroundColor: '#f1f5f9',
                          borderRadius: '50%',
                          display: 'flex',
                          alignItems: 'center',
                          justifyContent: 'center'
                        }}>
                          <span style={{ fontSize: '0.875rem', fontWeight: '500', color: '#64748b' }}>
                            {user.name.split(' ').map(n => n[0]).join('').slice(0, 2)}
                          </span>
                        </div>
                        <div>
                          <div style={{ fontWeight: '500', color: '#1e293b' }}>{user.name}</div>
                          <div style={{ fontSize: '0.875rem', color: '#64748b' }}>{user.email}</div>
                        </div>
                      </div>
                    </td>
                    <td style={{ padding: '1rem' }}>
                      <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
                        <Building style={{ width: '1rem', height: '1rem', color: '#64748b' }} />
                        <div>
                          <div style={{ fontWeight: '500', color: '#1e293b' }}>{user.company}</div>
                          <div style={{ fontSize: '0.875rem', color: '#64748b' }}>{user.phone}</div>
                        </div>
                      </div>
                    </td>
                    <td style={{ padding: '1rem' }}>
                      <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
                        <span style={{
                          padding: '0.25rem 0.75rem',
                          borderRadius: '9999px',
                          fontSize: '0.75rem',
                          fontWeight: '500',
                          backgroundColor: `${getPlanColor(user.plan || 'Basic')}20`,
                          color: getPlanColor(user.plan || 'Basic')
                        }}>
                          {user.plan}
                        </span>
                        {user.isPlanExpired && (
                          <div 
                            title="Plano expirado"
                            style={{
                              display: 'flex',
                              alignItems: 'center',
                              justifyContent: 'center',
                              backgroundColor: '#fee2e2',
                              color: '#ef4444',
                              borderRadius: '50%',
                              width: '1.5rem',
                              height: '1.5rem'
                            }}
                          >
                            <AlertTriangle size={14} />
                          </div>
                        )}
                      </div>
                    </td>
                    <td style={{ padding: '1rem' }}>
                      <span style={{
                        padding: '0.25rem 0.75rem',
                        borderRadius: '9999px',
                        fontSize: '0.75rem',
                        fontWeight: '500',
                        backgroundColor: `${getStatusColor(user.status)}20`,
                        color: getStatusColor(user.status)
                      }}>
                        {getStatusLabel(user.status)}
                      </span>
                    </td>
                    <td style={{ padding: '1rem' }}>
                      <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
                        <span style={{ fontWeight: '500', color: '#1e293b' }}>
                          R$ {user.credits.toFixed(2)}
                        </span>
                        <button
                          onClick={() => openAddCreditsModal(user.id)}
                          style={{
                            padding: '0.25rem',
                            backgroundColor: '#16a34a',
                            border: 'none',
                            borderRadius: '0.25rem',
                            cursor: 'pointer',
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                            transition: 'background-color 0.2s ease'
                          }}
                          onMouseEnter={(e) => {
                            e.currentTarget.style.backgroundColor = '#15803d';
                          }}
                          onMouseLeave={(e) => {
                            e.currentTarget.style.backgroundColor = '#16a34a';
                          }}
                          title="Adicionar créditos"
                        >
                          <CreditCard style={{ width: '0.875rem', height: '0.875rem', color: 'white' }} />
                        </button>
                      </div>
                    </td>
                    <td style={{ padding: '1rem', color: '#64748b' }}>
                      {formatDate(user.lastLogin)}
                    </td>
                    <td style={{ padding: '1rem' }}>
                      <div style={{ display: 'flex', gap: '0.5rem' }}>
                        <button
                          style={{
                            padding: '0.5rem',
                            backgroundColor: '#f0f9ff',
                            border: '1px solid #bae6fd',
                            borderRadius: '0.375rem',
                            cursor: 'pointer',
                            color: '#64748b'
                          }}
                          title="Visualizar"
                          onClick={() => handleViewUser(user)}
                        >
                          <Eye style={{ width: '1rem', height: '1rem' }} />
                        </button>
                        <button
                          style={{
                            padding: '0.5rem',
                            backgroundColor: '#f8fafc',
                            border: '1px solid #e2e8f0',
                            borderRadius: '0.375rem',
                            cursor: 'pointer',
                            color: '#64748b'
                          }}
                          title="Editar"
                          onClick={() => handleEditUser(user)}
                        >
                          <Edit style={{ width: '1rem', height: '1rem' }} />
                        </button>
                        <button
                          style={{
                            padding: '0.5rem',
                            backgroundColor: '#fef2f2',
                            border: '1px solid #fecaca',
                            borderRadius: '0.375rem',
                            cursor: 'pointer',
                            color: '#ef4444'
                          }}
                          title="Excluir"
                        >
                          <Trash2 style={{ width: '1rem', height: '1rem' }} />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        ) : (
          // Mobile Cards
          <div style={{ padding: '1rem' }}>
            {paginatedUsers.map((user) => (
              <ResponsiveCard
                key={user.id}
                avatar={
                  <div style={{
                    width: '3rem',
                    height: '3rem',
                    backgroundColor: '#f1f5f9',
                    borderRadius: '50%',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center'
                  }}>
                    <span style={{ fontSize: '1rem', fontWeight: '600', color: '#64748b' }}>
                      {user.name.split(' ').map(n => n[0]).join('').slice(0, 2)}
                    </span>
                  </div>
                }
                title={user.name}
                subtitle={user.email}
                status={{
                  label: user.status === 'active' ? 'Ativo' : user.status === 'inactive' ? 'Inativo' : 'Suspenso',
                  color: getStatusColor(user.status),
                  bgColor: user.status === 'active' ? '#dcfce7' : user.status === 'inactive' ? '#fef3c7' : '#fee2e2'
                }}
                fields={[
                  {
                    label: 'Empresa',
                    value: (
                      <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
                        <Building size={16} style={{ color: '#64748b' }} />
                        <div>
                          <div style={{ fontWeight: '500' }}>{user.company}</div>
                          <div style={{ fontSize: '0.875rem', color: '#64748b' }}>{user.phone}</div>
                        </div>
                      </div>
                    )
                  },
                  {
                    label: 'Plano',
                    value: (
                      <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
                        <span style={{
                          padding: '0.25rem 0.75rem',
                          backgroundColor: `${getPlanColor(user.plan || 'Basic')}20`,
                          color: getPlanColor(user.plan || 'Basic'),
                          borderRadius: '9999px',
                          fontSize: '0.75rem',
                          fontWeight: '500'
                        }}>
                          {user.plan}
                        </span>
                        {user.isPlanExpired && (
                          <div 
                            title="Plano expirado"
                            style={{
                              display: 'flex',
                              alignItems: 'center',
                              justifyContent: 'center',
                              backgroundColor: '#fee2e2',
                              color: '#ef4444',
                              borderRadius: '50%',
                              width: '1.5rem',
                              height: '1.5rem'
                            }}
                          >
                            <AlertTriangle size={14} />
                          </div>
                        )}
                      </div>
                    )
                  },
                  {
                    label: 'Créditos',
                    value: (
                      <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
                        <DollarSign size={16} style={{ color: '#10b981' }} />
                        <span style={{ fontWeight: '600', color: '#10b981' }}>
                          R$ {typeof user.credits === 'number' ? user.credits.toFixed(2) : user.credits}
                        </span>
                      </div>
                    ),
                    highlight: true
                  },
                  {
                    label: 'Último Login',
                    value: user.lastLogin ? new Date(user.lastLogin).toLocaleDateString('pt-BR') : 'N/A'
                  }
                ]}
                actions={
                  <div style={{ display: 'flex', gap: '0.5rem' }}>
                    <Tooltip content="Visualizar usuário">
                      <button
                        onClick={() => handleViewUser(user)}
                        style={{
                          padding: '0.5rem',
                          backgroundColor: '#f0f9ff',
                          border: '1px solid #e0f2fe',
                          borderRadius: '0.375rem',
                          cursor: 'pointer',
                          color: '#0369a1'
                        }}
                      >
                        <Eye size={16} />
                      </button>
                    </Tooltip>
                    
                    <Tooltip content="Adicionar créditos">
                      <button
                        onClick={() => openAddCreditsModal(user.id)}
                        style={{
                          padding: '0.5rem',
                          backgroundColor: '#f0fdf4',
                          border: '1px solid #dcfce7',
                          borderRadius: '0.375rem',
                          cursor: 'pointer',
                          color: '#16a34a'
                        }}
                      >
                        <DollarSign size={16} />
                      </button>
                    </Tooltip>
                    
                    <Tooltip content="Editar usuário">
                      <button
                        onClick={() => handleEditUser(user)}
                        style={{
                          padding: '0.5rem',
                          backgroundColor: '#f8fafc',
                          border: '1px solid #e2e8f0',
                          borderRadius: '0.375rem',
                          cursor: 'pointer',
                          color: '#64748b'
                        }}
                      >
                        <Edit size={16} />
                      </button>
                    </Tooltip>
                    
                    <Tooltip content="Excluir usuário">
                      <button
                        onClick={() => handleDeleteUser(user)}
                        style={{
                          padding: '0.5rem',
                          backgroundColor: '#fef2f2',
                          border: '1px solid #fecaca',
                          borderRadius: '0.375rem',
                          cursor: 'pointer',
                          color: '#ef4444'
                        }}
                      >
                        <Trash2 size={16} />
                      </button>
                    </Tooltip>
                  </div>
                }
              />
            ))}
          </div>
        )}
            </>
          )}
        </div>
        
        {/* Paginação */}
        <Pagination
          currentPage={currentPage}
          totalPages={totalPages}
          onPageChange={goToPage}
          itemsPerPage={itemsPerPage}
          totalItems={totalItems}
          showInfo={true}
        />
        
        {/* Empty State */}
        {filteredUsers.length === 0 && (
          <div style={{ textAlign: 'center', padding: '3rem', color: '#64748b' }}>
            <UserCheck size={48} style={{ margin: '0 auto 1rem', opacity: 0.5 }} />
            <p>Nenhum usuário encontrado</p>
          </div>
        )}
      </div>

      {/* Modal de Novo Usuário */}
      {showNewUserModal && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          backgroundColor: 'rgba(0, 0, 0, 0.5)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000,
          padding: '1rem'
        }}>
          <div style={{
            background: 'rgba(255, 255, 255, 0.98)',
            borderRadius: '1rem',
            border: '1px solid rgba(226, 232, 240, 0.8)',
            boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.25)',
            backdropFilter: 'blur(20px)',
            width: '100%',
            maxWidth: '600px',
            maxHeight: '90vh',
            overflow: 'auto'
          }}>
            {/* Header do Modal */}
            <div style={{
              padding: '1.5rem 1.5rem 1rem 1.5rem',
              borderBottom: '1px solid rgba(226, 232, 240, 0.5)',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'space-between'
            }}>
              <h2 style={{
                fontSize: '1.25rem',
                fontWeight: '700',
                color: '#1e293b',
                margin: 0
              }}>Novo Usuário</h2>
              <button
                onClick={() => setShowNewUserModal(false)}
                style={{
                  padding: '0.5rem',
                  background: 'transparent',
                  border: 'none',
                  borderRadius: '0.5rem',
                  cursor: 'pointer',
                  color: '#64748b',
                  transition: 'all 0.2s ease',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center'
                }}
                onMouseEnter={(e) => {
                  e.currentTarget.style.background = 'rgba(239, 68, 68, 0.1)';
                  e.currentTarget.style.color = '#ef4444';
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.background = 'transparent';
                  e.currentTarget.style.color = '#64748b';
                }}
              >
                <X style={{ width: '1.25rem', height: '1.25rem' }} />
              </button>
            </div>

            {/* Conteúdo do Modal */}
            <div style={{ padding: '1.5rem' }}>
              <form onSubmit={(e) => {
                e.preventDefault();
                handleNewUserSubmit();
              }}>
              <div style={{
                display: 'grid',
                gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',
                gap: '1rem',
                marginBottom: '1.5rem'
              }}>
                <div>
                  <label style={{
                    display: 'block',
                    fontSize: '0.875rem',
                    fontWeight: '600',
                    color: '#374151',
                    marginBottom: '0.5rem'
                  }}>Nome Completo *</label>
                  <input
                    type="text"
                    value={newUser.name}
                    onChange={(e) => setNewUser({...newUser, name: e.target.value})}
                    placeholder="Digite o nome completo"
                    required
                    style={{
                      width: '100%',
                      padding: '0.75rem 1rem',
                      border: '1px solid rgba(209, 213, 219, 0.8)',
                      borderRadius: '0.5rem',
                      fontSize: '0.875rem',
                      outline: 'none',
                      transition: 'all 0.2s ease',
                      background: 'rgba(255, 255, 255, 0.8)'
                    }}
                    onFocus={(e) => {
                      e.target.style.borderColor = '#6366f1';
                      e.target.style.boxShadow = '0 0 0 3px rgba(99, 102, 241, 0.1)';
                    }}
                    onBlur={(e) => {
                      e.target.style.borderColor = 'rgba(209, 213, 219, 0.8)';
                      e.target.style.boxShadow = 'none';
                    }}
                  />
                </div>

                <div>
                  <label style={{
                    display: 'block',
                    fontSize: '0.875rem',
                    fontWeight: '500',
                    color: '#374151',
                    marginBottom: '0.5rem'
                  }}>Nome de Usuário</label>
                  <input
                    type="text"
                    value={newUser.username}
                    onChange={(e) => setNewUser({...newUser, username: e.target.value})}
                    required
                    style={{
                      width: '100%',
                      padding: '0.75rem',
                      border: '1px solid #d1d5db',
                      borderRadius: '0.5rem',
                      fontSize: '0.875rem',
                      outline: 'none',
                      boxSizing: 'border-box'
                    }}
                  />
                </div>

                <div>
                  <label style={{
                    display: 'block',
                    fontSize: '0.875rem',
                    fontWeight: '500',
                    color: '#374151',
                    marginBottom: '0.5rem'
                  }}>Email</label>
                  <input
                    type="email"
                    value={newUser.email}
                    onChange={(e) => setNewUser({...newUser, email: e.target.value})}
                    required
                    style={{
                      width: '100%',
                      padding: '0.75rem',
                      border: '1px solid #d1d5db',
                      borderRadius: '0.5rem',
                      fontSize: '0.875rem',
                      outline: 'none',
                      boxSizing: 'border-box'
                    }}
                  />
                </div>

                <div>
                  <label style={{
                    display: 'block',
                    fontSize: '0.875rem',
                    fontWeight: '500',
                    color: '#374151',
                    marginBottom: '0.5rem'
                  }}>Empresa</label>
                  <input
                    type="text"
                    value={newUser.company}
                    onChange={(e) => setNewUser({...newUser, company: e.target.value})}
                    style={{
                      width: '100%',
                      padding: '0.75rem',
                      border: '1px solid #d1d5db',
                      borderRadius: '0.5rem',
                      fontSize: '0.875rem',
                      outline: 'none',
                      boxSizing: 'border-box'
                    }}
                  />
                </div>

                <div>
                  <label style={{
                    display: 'block',
                    fontSize: '0.875rem',
                    fontWeight: '500',
                    color: '#374151',
                    marginBottom: '0.5rem'
                  }}>Telefone</label>
                  <input
                    type="tel"
                    value={newUser.phone}
                    onChange={(e) => setNewUser({...newUser, phone: e.target.value})}
                    style={{
                      width: '100%',
                      padding: '0.75rem',
                      border: '1px solid #d1d5db',
                      borderRadius: '0.5rem',
                      fontSize: '0.875rem',
                      outline: 'none',
                      boxSizing: 'border-box'
                    }}
                  />
                </div>

                <div>
                  <label style={{
                    display: 'block',
                    fontSize: '0.875rem',
                    fontWeight: '500',
                    color: '#374151',
                    marginBottom: '0.5rem'
                  }}>Plano</label>
                  <select
                    value={newUser.plan}
                    onChange={(e) => setNewUser({...newUser, plan: e.target.value})}
                    style={{
                      width: '100%',
                      padding: '0.75rem',
                      border: '1px solid #d1d5db',
                      borderRadius: '0.5rem',
                      fontSize: '0.875rem',
                      outline: 'none',
                      backgroundColor: 'white',
                      boxSizing: 'border-box'
                    }}
                  >
                    <option value="Basic">Basic</option>
                    <option value="Pro">Pro</option>
                    <option value="Enterprise">Enterprise</option>
                  </select>
                </div>

                <div>
                  <label style={{
                    display: 'block',
                    fontSize: '0.875rem',
                    fontWeight: '500',
                    color: '#374151',
                    marginBottom: '0.5rem'
                  }}>Status</label>
                  <select
                    value={newUser.status}
                    onChange={(e) => setNewUser({...newUser, status: e.target.value})}
                    style={{
                      width: '100%',
                      padding: '0.75rem',
                      border: '1px solid #d1d5db',
                      borderRadius: '0.5rem',
                      fontSize: '0.875rem',
                      outline: 'none',
                      backgroundColor: 'white',
                      boxSizing: 'border-box'
                    }}
                  >
                    <option value="active">Ativo</option>
                    <option value="inactive">Inativo</option>
                    <option value="suspended">Suspenso</option>
                  </select>
                </div>

                <div>
                  <label style={{
                    display: 'block',
                    fontSize: '0.875rem',
                    fontWeight: '500',
                    color: '#374151',
                    marginBottom: '0.5rem'
                  }}>Tipo de Usuário</label>
                  <select
                    value={newUser.type}
                    onChange={(e) => setNewUser({...newUser, type: e.target.value})}
                    style={{
                      width: '100%',
                      padding: '0.75rem',
                      border: '1px solid #d1d5db',
                      borderRadius: '0.5rem',
                      fontSize: '0.875rem',
                      outline: 'none',
                      backgroundColor: 'white',
                      boxSizing: 'border-box'
                    }}
                  >
                    <option value="cliente">Cliente</option>
                    <option value="revenda">Revenda</option>
                    <option value="admin">Administrador</option>
                    <option value="colaborador">Colaborador</option>
                  </select>
                </div>

                <div style={{ gridColumn: '1 / -1' }}>
                  <label style={{
                    display: 'block',
                    fontSize: '0.875rem',
                    fontWeight: '500',
                    color: '#374151',
                    marginBottom: '0.5rem'
                  }}>Senha</label>
                  <input
                    type="password"
                    value={newUser.password}
                    onChange={(e) => setNewUser({...newUser, password: e.target.value})}
                    required
                    style={{
                      width: '100%',
                      padding: '0.75rem',
                      border: '1px solid #d1d5db',
                      borderRadius: '0.5rem',
                      fontSize: '0.875rem',
                      outline: 'none',
                      boxSizing: 'border-box'
                    }}
                  />
                </div>
              </div>

              <div style={{
                display: 'flex',
                gap: '0.75rem',
                justifyContent: 'flex-end'
              }}>
                <button
                  type="button"
                  onClick={() => setShowNewUserModal(false)}
                  style={{
                    padding: '0.75rem 1.5rem',
                    background: 'rgba(243, 244, 246, 0.8)',
                    border: '1px solid rgba(209, 213, 219, 0.8)',
                    borderRadius: '0.5rem',
                    color: '#374151',
                    fontSize: '0.875rem',
                    fontWeight: '600',
                    cursor: 'pointer',
                    transition: 'all 0.2s ease'
                  }}
                  onMouseEnter={(e) => {
                    e.currentTarget.style.background = 'rgba(229, 231, 235, 0.9)';
                  }}
                  onMouseLeave={(e) => {
                    e.currentTarget.style.background = 'rgba(243, 244, 246, 0.8)';
                  }}
                >
                  Cancelar
                </button>
                <button
                  type="submit"
                  style={{
                    display: 'flex',
                    alignItems: 'center',
                    gap: '0.5rem',
                    padding: '0.75rem 1.5rem',
                    background: 'linear-gradient(135deg, #6366f1, #8b5cf6)',
                    border: 'none',
                    borderRadius: '0.5rem',
                    color: 'white',
                    fontSize: '0.875rem',
                    fontWeight: '600',
                    cursor: 'pointer',
                    transition: 'all 0.2s ease'
                  }}
                  onMouseEnter={(e) => {
                    e.currentTarget.style.transform = 'translateY(-1px)';
                    e.currentTarget.style.boxShadow = '0 4px 12px -2px rgba(99, 102, 241, 0.3)';
                  }}
                  onMouseLeave={(e) => {
                    e.currentTarget.style.transform = 'translateY(0)';
                    e.currentTarget.style.boxShadow = 'none';
                  }}
                >
                  <UserCheck style={{ width: '1rem', height: '1rem' }} />
                  Criar Usuário
                </button>
              </div>
            </form>
            </div>
          </div>
        </div>
      )}

      {/* Modal Adicionar Créditos */}
      {showAddCreditsModal && (
        <div
          style={{
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            backgroundColor: 'rgba(0, 0, 0, 0.5)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            zIndex: 1000,
            padding: '1rem'
          }}
          onClick={(e) => {
            if (e.target === e.currentTarget) {
              closeAddCreditsModal();
            }
          }}
        >
          <div
            style={{
              background: 'rgba(255, 255, 255, 0.98)',
              backdropFilter: 'blur(20px)',
              borderRadius: '1rem',
              border: '1px solid rgba(255, 255, 255, 0.2)',
              boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.25)',
              width: '100%',
              maxWidth: '500px',
              maxHeight: '90vh',
              overflow: 'auto'
            }}
            onClick={(e) => e.stopPropagation()}
          >
            {/* Header */}
            <div
              style={{
                padding: '1.5rem 2rem',
                borderBottom: '1px solid rgba(0, 0, 0, 0.1)',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'space-between'
              }}
            >
              <h2
                style={{
                  margin: 0,
                  fontSize: '1.25rem',
                  fontWeight: '600',
                  color: '#1f2937'
                }}
              >
                Adicionar Créditos
              </h2>
              <button
                onClick={closeAddCreditsModal}
                style={{
                  background: 'none',
                  border: 'none',
                  padding: '0.5rem',
                  cursor: 'pointer',
                  borderRadius: '0.5rem',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  transition: 'background-color 0.2s ease'
                }}
                onMouseEnter={(e) => {
                  e.currentTarget.style.backgroundColor = 'rgba(0, 0, 0, 0.1)';
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.backgroundColor = 'transparent';
                }}
              >
                <X style={{ width: '1.25rem', height: '1.25rem', color: '#6b7280' }} />
              </button>
            </div>

            {/* Content */}
            <div style={{ padding: '2rem' }}>
              <div style={{ display: 'flex', flexDirection: 'column', gap: '1.5rem' }}>
                {/* Valor */}
                <div>
                  <label
                    style={{
                      display: 'block',
                      fontSize: '0.875rem',
                      fontWeight: '500',
                      color: '#374151',
                      marginBottom: '0.5rem'
                    }}
                  >
                    Valor (R$) *
                  </label>
                  <input
                    type="number"
                    step="0.01"
                    min="0"
                    value={creditsData.amount}
                    onChange={(e) => setCreditsData(prev => ({ ...prev, amount: e.target.value }))}
                    placeholder="100.00"
                    style={{
                      width: '100%',
                      padding: '0.75rem 1rem',
                      border: '1px solid #d1d5db',
                      borderRadius: '0.5rem',
                      fontSize: '0.875rem',
                      background: 'rgba(255, 255, 255, 0.8)',
                      transition: 'all 0.2s ease',
                      outline: 'none'
                    }}
                    onFocus={(e) => {
                      e.target.style.borderColor = '#3b82f6';
                      e.target.style.boxShadow = '0 0 0 3px rgba(59, 130, 246, 0.1)';
                    }}
                    onBlur={(e) => {
                      e.target.style.borderColor = '#d1d5db';
                      e.target.style.boxShadow = 'none';
                    }}
                  />
                </div>

                {/* Anotação */}
                <div>
                  <label
                    style={{
                      display: 'block',
                      fontSize: '0.875rem',
                      fontWeight: '500',
                      color: '#374151',
                      marginBottom: '0.5rem'
                    }}
                  >
                    Anotação
                  </label>
                  <textarea
                    value={creditsData.note}
                    onChange={(e) => setCreditsData(prev => ({ ...prev, note: e.target.value }))}
                    placeholder="Observações sobre o crédito adicionado..."
                    rows={3}
                    style={{
                      width: '100%',
                      padding: '0.75rem 1rem',
                      border: '1px solid #d1d5db',
                      borderRadius: '0.5rem',
                      fontSize: '0.875rem',
                      background: 'rgba(255, 255, 255, 0.8)',
                      transition: 'all 0.2s ease',
                      outline: 'none',
                      resize: 'vertical',
                      minHeight: '80px'
                    }}
                    onFocus={(e) => {
                      e.target.style.borderColor = '#3b82f6';
                      e.target.style.boxShadow = '0 0 0 3px rgba(59, 130, 246, 0.1)';
                    }}
                    onBlur={(e) => {
                      e.target.style.borderColor = '#d1d5db';
                      e.target.style.boxShadow = 'none';
                    }}
                  />
                </div>
              </div>

              {/* Buttons */}
              <div
                style={{
                  display: 'flex',
                  gap: '1rem',
                  marginTop: '2rem',
                  justifyContent: 'flex-end'
                }}
              >
                <button
                  onClick={closeAddCreditsModal}
                  style={{
                    padding: '0.75rem 1.5rem',
                    background: 'transparent',
                    color: '#6b7280',
                    border: '1px solid #d1d5db',
                    borderRadius: '0.5rem',
                    fontSize: '0.875rem',
                    fontWeight: '500',
                    cursor: 'pointer',
                    transition: 'all 0.2s ease'
                  }}
                  onMouseEnter={(e) => {
                    e.currentTarget.style.backgroundColor = '#f9fafb';
                    e.currentTarget.style.borderColor = '#9ca3af';
                  }}
                  onMouseLeave={(e) => {
                    e.currentTarget.style.backgroundColor = 'transparent';
                    e.currentTarget.style.borderColor = '#d1d5db';
                  }}
                >
                  Cancelar
                </button>
                
                <button
                  onClick={handleAddCreditsSubmit}
                  style={{
                    display: 'flex',
                    alignItems: 'center',
                    gap: '0.5rem',
                    padding: '0.75rem 1.5rem',
                    background: 'linear-gradient(135deg, #16a34a 0%, #15803d 100%)',
                    color: 'white',
                    border: 'none',
                    borderRadius: '0.5rem',
                    fontSize: '0.875rem',
                    fontWeight: '500',
                    cursor: 'pointer',
                    transition: 'all 0.2s ease',
                    boxShadow: '0 4px 12px rgba(22, 163, 74, 0.3)'
                  }}
                  onMouseEnter={(e) => {
                    e.currentTarget.style.transform = 'translateY(-1px)';
                    e.currentTarget.style.boxShadow = '0 8px 20px rgba(22, 163, 74, 0.4)';
                  }}
                  onMouseLeave={(e) => {
                    e.currentTarget.style.transform = 'translateY(0)';
                    e.currentTarget.style.boxShadow = '0 4px 12px rgba(22, 163, 74, 0.3)';
                  }}
                >
                  <DollarSign style={{ width: '1rem', height: '1rem' }} />
                  Adicionar Créditos
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Modal de Visualização de Usuário */}
      {showViewUserModal && selectedUser && (
        <div
          style={{
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            backgroundColor: 'rgba(0, 0, 0, 0.5)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            zIndex: 1000,
            padding: '1rem'
          }}
          onClick={(e) => {
            if (e.target === e.currentTarget) {
              closeViewUserModal();
            }
          }}
        >
          <div
            style={{
              background: 'linear-gradient(135deg, rgba(255, 255, 255, 0.95) 0%, rgba(248, 250, 252, 0.95) 100%)',
              backdropFilter: 'blur(20px)',
              borderRadius: '1rem',
              padding: '2rem',
              width: '100%',
              maxWidth: '600px',
              maxHeight: '90vh',
              overflow: 'auto',
              border: '1px solid rgba(255, 255, 255, 0.2)',
              boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.25)'
            }}
          >
            {/* Header do Modal */}
            <div
              style={{
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'space-between',
                marginBottom: '2rem',
                paddingBottom: '1rem',
                borderBottom: '1px solid rgba(0, 0, 0, 0.1)'
              }}
            >
              <div style={{ display: 'flex', alignItems: 'center', gap: '0.75rem' }}>
                <div
                  style={{
                    padding: '0.75rem',
                    backgroundColor: '#f0f9ff',
                    borderRadius: '0.75rem',
                    border: '1px solid #e0f2fe'
                  }}
                >
                  <Eye style={{ width: '1.5rem', height: '1.5rem', color: '#0369a1' }} />
                </div>
                <div>
                  <h2 style={{ margin: 0, fontSize: '1.5rem', fontWeight: '700', color: '#1e293b' }}>
                    Visualizar Usuário
                  </h2>
                  <p style={{ margin: 0, fontSize: '0.875rem', color: '#64748b' }}>
                    Detalhes completos do usuário
                  </p>
                </div>
              </div>
              <button
                onClick={closeViewUserModal}
                style={{
                  padding: '0.5rem',
                  backgroundColor: 'transparent',
                  border: 'none',
                  borderRadius: '0.5rem',
                  cursor: 'pointer',
                  color: '#64748b'
                }}
              >
                <X style={{ width: '1.5rem', height: '1.5rem' }} />
              </button>
            </div>

            {/* Conteúdo do Modal */}
            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: '1.5rem' }}>
              {/* Informações Pessoais */}
              <div
                style={{
                  padding: '1.5rem',
                  backgroundColor: 'rgba(255, 255, 255, 0.7)',
                  borderRadius: '0.75rem',
                  border: '1px solid rgba(0, 0, 0, 0.1)'
                }}
              >
                <h3 style={{ margin: '0 0 1rem 0', fontSize: '1.125rem', fontWeight: '600', color: '#1e293b' }}>
                  Informações Pessoais
                </h3>
                <div style={{ display: 'flex', flexDirection: 'column', gap: '0.75rem' }}>
                  <div>
                    <label style={{ fontSize: '0.875rem', fontWeight: '500', color: '#64748b' }}>Nome</label>
                    <p style={{ margin: '0.25rem 0 0 0', fontSize: '1rem', color: '#1e293b' }}>{selectedUser.name}</p>
                  </div>
                  <div>
                    <label style={{ fontSize: '0.875rem', fontWeight: '500', color: '#64748b' }}>Email</label>
                    <p style={{ margin: '0.25rem 0 0 0', fontSize: '1rem', color: '#1e293b' }}>{selectedUser.email}</p>
                  </div>
                  <div>
                    <label style={{ fontSize: '0.875rem', fontWeight: '500', color: '#64748b' }}>Telefone</label>
                    <p style={{ margin: '0.25rem 0 0 0', fontSize: '1rem', color: '#1e293b' }}>{selectedUser.phone || 'Não informado'}</p>
                  </div>
                  <div>
                    <label style={{ fontSize: '0.875rem', fontWeight: '500', color: '#64748b' }}>Empresa</label>
                    <p style={{ margin: '0.25rem 0 0 0', fontSize: '1rem', color: '#1e293b' }}>{selectedUser.company || 'Não informado'}</p>
                  </div>
                </div>
              </div>

              {/* Informações da Conta */}
              <div
                style={{
                  padding: '1.5rem',
                  backgroundColor: 'rgba(255, 255, 255, 0.7)',
                  borderRadius: '0.75rem',
                  border: '1px solid rgba(0, 0, 0, 0.1)'
                }}
              >
                <h3 style={{ margin: '0 0 1rem 0', fontSize: '1.125rem', fontWeight: '600', color: '#1e293b' }}>
                  Informações da Conta
                </h3>
                <div style={{ display: 'flex', flexDirection: 'column', gap: '0.75rem' }}>
                  <div>
                    <label style={{ fontSize: '0.875rem', fontWeight: '500', color: '#64748b' }}>Tipo</label>
                    <p style={{ margin: '0.25rem 0 0 0', fontSize: '1rem', color: '#1e293b' }}>
                      {selectedUser.role === 'user' ? 'Cliente' : 
                       selectedUser.role === 'admin' ? 'Administrador' : 
                       selectedUser.role === 'reseller' ? 'Revenda' : 'Colaborador'}
                    </p>
                  </div>
                  <div>
                    <label style={{ fontSize: '0.875rem', fontWeight: '500', color: '#64748b' }}>Status</label>
                    <p style={{ 
                      margin: '0.25rem 0 0 0', 
                      fontSize: '1rem', 
                      color: selectedUser.status === 'active' ? '#16a34a' : 
                             selectedUser.status === 'inactive' ? '#f59e0b' : '#ef4444'
                    }}>
                      {selectedUser.status === 'active' ? 'Ativo' : 
                       selectedUser.status === 'inactive' ? 'Inativo' : 'Suspenso'}
                    </p>
                  </div>
                  <div>
                    <label style={{ fontSize: '0.875rem', fontWeight: '500', color: '#64748b' }}>Créditos</label>
                    <p style={{ margin: '0.25rem 0 0 0', fontSize: '1rem', color: '#1e293b', fontWeight: '600' }}>
                      R$ {selectedUser.credits.toFixed(2)}
                    </p>
                  </div>
                  <div>
                    <label style={{ fontSize: '0.875rem', fontWeight: '500', color: '#64748b' }}>Plano</label>
                    <p style={{ 
                      margin: '0.25rem 0 0 0', 
                      fontSize: '1rem', 
                      color: getPlanColor(selectedUser.planName || 'Sem plano'),
                      fontWeight: '600'
                    }}>
                      {selectedUser.planName || 'Sem plano'}
                    </p>
                  </div>
                </div>
              </div>
            </div>

            {/* Footer do Modal */}
            <div
              style={{
                display: 'flex',
                justifyContent: 'flex-end',
                marginTop: '2rem',
                paddingTop: '1rem',
                borderTop: '1px solid rgba(0, 0, 0, 0.1)'
              }}
            >
              <button
                onClick={closeViewUserModal}
                style={{
                  padding: '0.75rem 1.5rem',
                  backgroundColor: '#f8fafc',
                  border: '1px solid #e2e8f0',
                  borderRadius: '0.5rem',
                  cursor: 'pointer',
                  fontSize: '0.875rem',
                  fontWeight: '500',
                  color: '#64748b'
                }}
              >
                Fechar
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Modal de Edição de Usuário */}
      {showEditUserModal && selectedUser && (
        <div
          style={{
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            backgroundColor: 'rgba(0, 0, 0, 0.5)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            zIndex: 1000,
            padding: '1rem'
          }}
          onClick={(e) => {
            if (e.target === e.currentTarget) {
              closeEditUserModal();
            }
          }}
        >
          <div
            style={{
              background: 'linear-gradient(135deg, rgba(255, 255, 255, 0.95) 0%, rgba(248, 250, 252, 0.95) 100%)',
              backdropFilter: 'blur(20px)',
              borderRadius: '1rem',
              padding: '2rem',
              width: '100%',
              maxWidth: '700px',
              maxHeight: '90vh',
              overflow: 'auto',
              border: '1px solid rgba(255, 255, 255, 0.2)',
              boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.25)'
            }}
          >
            {/* Header do Modal */}
            <div
              style={{
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'space-between',
                marginBottom: '2rem',
                paddingBottom: '1rem',
                borderBottom: '1px solid rgba(0, 0, 0, 0.1)'
              }}
            >
              <div style={{ display: 'flex', alignItems: 'center', gap: '0.75rem' }}>
                <div
                  style={{
                    padding: '0.75rem',
                    backgroundColor: '#f0fdf4',
                    borderRadius: '0.75rem',
                    border: '1px solid #dcfce7'
                  }}
                >
                  <Edit style={{ width: '1.5rem', height: '1.5rem', color: '#16a34a' }} />
                </div>
                <div>
                  <h2 style={{ margin: 0, fontSize: '1.5rem', fontWeight: '700', color: '#1e293b' }}>
                    Editar Usuário
                  </h2>
                  <p style={{ margin: 0, fontSize: '0.875rem', color: '#64748b' }}>
                    Altere as informações do usuário
                  </p>
                </div>
              </div>
              <button
                onClick={closeEditUserModal}
                style={{
                  padding: '0.5rem',
                  backgroundColor: 'transparent',
                  border: 'none',
                  borderRadius: '0.5rem',
                  cursor: 'pointer',
                  color: '#64748b'
                }}
              >
                <X style={{ width: '1.5rem', height: '1.5rem' }} />
              </button>
            </div>

            {/* Formulário de Edição */}
            <form onSubmit={handleUpdateUser}>
              <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))', gap: '1.5rem' }}>
                <div>
                  <label style={{ display: 'block', fontSize: '0.875rem', fontWeight: '500', color: '#374151', marginBottom: '0.5rem' }}>
                    Nome Completo *
                  </label>
                  <input
                    type="text"
                    value={newUser.name}
                    onChange={(e) => setNewUser({ ...newUser, name: e.target.value })}
                    required
                    style={{
                      width: '100%',
                      padding: '0.75rem',
                      border: '1px solid #d1d5db',
                      borderRadius: '0.5rem',
                      fontSize: '1rem',
                      backgroundColor: 'rgba(255, 255, 255, 0.8)'
                    }}
                  />
                </div>

                <div>
                  <label style={{ display: 'block', fontSize: '0.875rem', fontWeight: '500', color: '#374151', marginBottom: '0.5rem' }}>
                    Email *
                  </label>
                  <input
                    type="email"
                    value={newUser.email}
                    onChange={(e) => setNewUser({ ...newUser, email: e.target.value })}
                    required
                    style={{
                      width: '100%',
                      padding: '0.75rem',
                      border: '1px solid #d1d5db',
                      borderRadius: '0.5rem',
                      fontSize: '1rem',
                      backgroundColor: 'rgba(255, 255, 255, 0.8)'
                    }}
                  />
                </div>

                <div>
                  <label style={{ display: 'block', fontSize: '0.875rem', fontWeight: '500', color: '#374151', marginBottom: '0.5rem' }}>
                    Empresa
                  </label>
                  <input
                    type="text"
                    value={newUser.company}
                    onChange={(e) => setNewUser({ ...newUser, company: e.target.value })}
                    style={{
                      width: '100%',
                      padding: '0.75rem',
                      border: '1px solid #d1d5db',
                      borderRadius: '0.5rem',
                      fontSize: '1rem',
                      backgroundColor: 'rgba(255, 255, 255, 0.8)'
                    }}
                  />
                </div>

                <div>
                  <label style={{ display: 'block', fontSize: '0.875rem', fontWeight: '500', color: '#374151', marginBottom: '0.5rem' }}>
                    Telefone
                  </label>
                  <input
                    type="tel"
                    value={newUser.phone}
                    onChange={(e) => setNewUser({ ...newUser, phone: e.target.value })}
                    style={{
                      width: '100%',
                      padding: '0.75rem',
                      border: '1px solid #d1d5db',
                      borderRadius: '0.5rem',
                      fontSize: '1rem',
                      backgroundColor: 'rgba(255, 255, 255, 0.8)'
                    }}
                  />
                </div>

                <div>
                  <label style={{ display: 'block', fontSize: '0.875rem', fontWeight: '500', color: '#374151', marginBottom: '0.5rem' }}>
                    Status *
                  </label>
                  <select
                    value={newUser.status}
                    onChange={(e) => setNewUser({ ...newUser, status: e.target.value as 'active' | 'inactive' | 'suspended' })}
                    required
                    style={{
                      width: '100%',
                      padding: '0.75rem',
                      border: '1px solid #d1d5db',
                      borderRadius: '0.5rem',
                      fontSize: '1rem',
                      backgroundColor: 'rgba(255, 255, 255, 0.8)'
                    }}
                  >
                    <option value="active">Ativo</option>
                    <option value="inactive">Inativo</option>
                    <option value="suspended">Suspenso</option>
                  </select>
                </div>
              </div>

              {/* Footer do Modal */}
              <div
                style={{
                  display: 'flex',
                  justifyContent: 'flex-end',
                  gap: '0.75rem',
                  marginTop: '2rem',
                  paddingTop: '1rem',
                  borderTop: '1px solid rgba(0, 0, 0, 0.1)'
                }}
              >
                <button
                  type="button"
                  onClick={closeEditUserModal}
                  style={{
                    padding: '0.75rem 1.5rem',
                    backgroundColor: '#f8fafc',
                    border: '1px solid #e2e8f0',
                    borderRadius: '0.5rem',
                    cursor: 'pointer',
                    fontSize: '0.875rem',
                    fontWeight: '500',
                    color: '#64748b'
                  }}
                >
                  Cancelar
                </button>
                
                <button
                  type="submit"
                  disabled={isLoading}
                  style={{
                    display: 'flex',
                    alignItems: 'center',
                    gap: '0.5rem',
                    padding: '0.75rem 1.5rem',
                    background: 'linear-gradient(135deg, #16a34a 0%, #15803d 100%)',
                    border: 'none',
                    borderRadius: '0.5rem',
                    cursor: isLoading ? 'not-allowed' : 'pointer',
                    fontSize: '0.875rem',
                    fontWeight: '500',
                    color: 'white',
                    opacity: isLoading ? 0.7 : 1
                  }}
                >
                  {isLoading ? 'Salvando...' : 'Salvar Alterações'}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </MainLayout>
  );
}
